

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Oct 15 12:00:49 2023

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.41
    41                           ; Generated 25/01/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4620 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  00160E                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _lat_register
    80  00160E  89                 	db	137
    81  00160F  0F                 	db	15
    82  001610  8A                 	db	138
    83  001611  0F                 	db	15
    84  001612  8B                 	db	139
    85  001613  0F                 	db	15
    86  001614  8C                 	db	140
    87  001615  0F                 	db	15
    88  001616  8D                 	db	141
    89  001617  0F                 	db	15
    90                           
    91                           ;initializer for _tris_register
    92  001618  92                 	db	146
    93  001619  0F                 	db	15
    94  00161A  93                 	db	147
    95  00161B  0F                 	db	15
    96  00161C  94                 	db	148
    97  00161D  0F                 	db	15
    98  00161E  95                 	db	149
    99  00161F  0F                 	db	15
   100  001620  96                 	db	150
   101  001621  0F                 	db	15
   102                           
   103                           ;initializer for _RB7_Flag
   104  001622  01                 	db	1
   105                           
   106                           ;initializer for _RB6_Flag
   107  001623  01                 	db	1
   108                           
   109                           ;initializer for _RB5_Flag
   110  001624  01                 	db	1
   111                           
   112                           ;initializer for _RB4_Flag
   113  001625  01                 	db	1
   114                           
   115                           ;initializer for _adc_4
   116  001626  00                 	db	0
   117  001627  00                 	db	0
   118  001628  05                 	db	5
   119  001629  05                 	db	5
   120  00162A  03                 	db	3
   121  00162B  03                 	db	3
   122                           
   123                           ;initializer for _adc_3
   124  00162C  00                 	db	0
   125  00162D  00                 	db	0
   126  00162E  05                 	db	5
   127  00162F  05                 	db	5
   128  001630  02                 	db	2
   129  001631  03                 	db	3
   130                           
   131                           ;initializer for _adc_2
   132  001632  00                 	db	0
   133  001633  00                 	db	0
   134  001634  05                 	db	5
   135  001635  05                 	db	5
   136  001636  01                 	db	1
   137  001637  03                 	db	3
   138                           
   139                           ;initializer for _adc_1
   140  001638  BE                 	db	low _ADC_DefaultInterruptHandeler
   141  001639  16                 	db	high _ADC_DefaultInterruptHandeler
   142  00163A  05                 	db	5
   143  00163B  05                 	db	5
   144  00163C  00                 	db	0
   145  00163D  03                 	db	3
   146                           
   147                           ;initializer for _led5
   148  00163E  43                 	db	67
   149                           
   150                           ;initializer for _led4
   151  00163F  33                 	db	51
   152                           
   153                           ;initializer for _led3
   154  001640  23                 	db	35
   155                           
   156                           ;initializer for _led2
   157  001641  13                 	db	19
   158                           
   159                           ;initializer for _led1
   160  001642  03                 	db	3
   161                           
   162                           	psect	idataBANK0
   163  0016A4                     __pidataBANK0:
   164                           	opt stack 0
   165                           
   166                           ;initializer for _keypad1
   167  0016A4  02                 	db	2
   168  0016A5  00                 	db	0
   169  0016A6  12                 	db	18
   170  0016A7  00                 	db	0
   171  0016A8  22                 	db	34
   172  0016A9  00                 	db	0
   173  0016AA  32                 	db	50
   174  0016AB  00                 	db	0
   175  0016AC  C2                 	db	194
   176  0016AD  00                 	db	0
   177  0016AE  D2                 	db	210
   178  0016AF  00                 	db	0
   179  0016B0  E2                 	db	226
   180  0016B1  00                 	db	0
   181  0016B2  F2                 	db	242
   182  0016B3  00                 	db	0
   183                           
   184                           ;initializer for _port_register
   185  0016B4  80                 	db	128
   186  0016B5  0F                 	db	15
   187  0016B6  81                 	db	129
   188  0016B7  0F                 	db	15
   189  0016B8  82                 	db	130
   190  0016B9  0F                 	db	15
   191  0016BA  83                 	db	131
   192  0016BB  0F                 	db	15
   193  0016BC  84                 	db	132
   194  0016BD  0F                 	db	15
   195                           
   196                           	psect	smallconst
   197  001000                     __psmallconst:
   198                           	opt stack 0
   199  001000  00                 	db	0
   200  001001  37                 	db	55
   201  001002  38                 	db	56
   202  001003  39                 	db	57
   203  001004  2F                 	db	47
   204  001005  34                 	db	52
   205  001006  35                 	db	53
   206  001007  36                 	db	54
   207  001008  2A                 	db	42
   208  001009  31                 	db	49
   209  00100A  32                 	db	50
   210  00100B  33                 	db	51
   211  00100C  2D                 	db	45
   212  00100D  63                 	db	99
   213  00100E  30                 	db	48
   214  00100F  3D                 	db	61
   215  001010  2B                 	db	43
   216  001011                     __end_of_btn_values:
   217                           	opt stack 0
   218  0000                     _ADRESL	set	4035
   219  0000                     _ADRESH	set	4036
   220  0000                     _ADCON1bits	set	4033
   221  0000                     _ADCON2bits	set	4032
   222  0000                     _ADCON0bits	set	4034
   223  0000                     _PIR1bits	set	3998
   224  0000                     _PIE1bits	set	3997
   225  0000                     _PORTBbits	set	3969
   226  0000                     _INTCON2bits	set	4081
   227  0000                     _INTCON3bits	set	4080
   228  0000                     _EECON2	set	4007
   229  0000                     _INTCONbits	set	4082
   230  0000                     _EECON1bits	set	4006
   231  0000                     _EEDATA	set	4008
   232  0000                     _EEADR	set	4009
   233  0000                     _EEADRH	set	4010
   234  0000                     _LATE	set	3981
   235  0000                     _LATD	set	3980
   236  0000                     _LATC	set	3979
   237  0000                     _LATB	set	3978
   238  0000                     _LATA	set	3977
   239  0000                     _PORTE	set	3972
   240  0000                     _PORTD	set	3971
   241  0000                     _PORTC	set	3970
   242  0000                     _PORTB	set	3969
   243  0000                     _PORTA	set	3968
   244  0000                     _TRISE	set	3990
   245  0000                     _TRISD	set	3989
   246  0000                     _TRISC	set	3988
   247  0000                     _TRISB	set	3987
   248  0000                     _TRISA	set	3986
   249                           
   250                           ; #config settings
   251  001011  00                 	db	0	; dummy byte at the end
   252  0000                     
   253                           	psect	cinit
   254  0014F0                     __pcinit:
   255                           	opt stack 0
   256  0014F0                     start_initialization:
   257                           	opt stack 0
   258  0014F0                     __initialization:
   259                           	opt stack 0
   260                           
   261                           ; Initialize objects allocated to BANK0 (26 bytes)
   262                           ; load TBLPTR registers with __pidataBANK0
   263  0014F0  0EA4               	movlw	low __pidataBANK0
   264  0014F2  6EF6               	movwf	tblptrl,c
   265  0014F4  0E16               	movlw	high __pidataBANK0
   266  0014F6  6EF7               	movwf	tblptrh,c
   267  0014F8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   268  0014FA  6EF8               	movwf	tblptru,c
   269  0014FC  EE00  F080         	lfsr	0,__pdataBANK0
   270  001500  EE10 F01A          	lfsr	1,26
   271  001504                     copy_data0:
   272  001504  0009               	tblrd		*+
   273  001506  CFF5 FFEE          	movff	tablat,postinc0
   274  00150A  50E5               	movf	postdec1,w,c
   275  00150C  50E1               	movf	fsr1l,w,c
   276  00150E  E1FA               	bnz	copy_data0
   277                           
   278                           ; Initialize objects allocated to COMRAM (53 bytes)
   279                           ; load TBLPTR registers with __pidataCOMRAM
   280  001510  0E0E               	movlw	low __pidataCOMRAM
   281  001512  6EF6               	movwf	tblptrl,c
   282  001514  0E16               	movlw	high __pidataCOMRAM
   283  001516  6EF7               	movwf	tblptrh,c
   284  001518  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   285  00151A  6EF8               	movwf	tblptru,c
   286  00151C  EE00  F001         	lfsr	0,__pdataCOMRAM
   287  001520  EE10 F035          	lfsr	1,53
   288  001524                     copy_data1:
   289  001524  0009               	tblrd		*+
   290  001526  CFF5 FFEE          	movff	tablat,postinc0
   291  00152A  50E5               	movf	postdec1,w,c
   292  00152C  50E1               	movf	fsr1l,w,c
   293  00152E  E1FA               	bnz	copy_data1
   294                           
   295                           ; Clear objects allocated to COMRAM (34 bytes)
   296  001530  EE00  F036         	lfsr	0,__pbssCOMRAM
   297  001534  0E22               	movlw	34
   298  001536                     clear_0:
   299  001536  6AEE               	clrf	postinc0,c
   300  001538  06E8               	decf	wreg,f,c
   301  00153A  E1FD               	bnz	clear_0
   302  00153C                     end_of_initialization:
   303                           	opt stack 0
   304  00153C                     __end_of__initialization:
   305                           	opt stack 0
   306  00153C  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   307  00153E  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   308  001540  0100               	movlb	0
   309  001542  EF44  F00B         	goto	_main	;jump to C main() function
   310                           tblptru	equ	0xFF8
   311                           tblptrh	equ	0xFF7
   312                           tblptrl	equ	0xFF6
   313                           tablat	equ	0xFF5
   314                           postinc0	equ	0xFEE
   315                           wreg	equ	0xFE8
   316                           postdec1	equ	0xFE5
   317                           fsr1l	equ	0xFE1
   318                           
   319                           	psect	bssCOMRAM
   320  000036                     __pbssCOMRAM:
   321                           	opt stack 0
   322  000036                     _ADC_InterruptHandeler:
   323                           	opt stack 0
   324  000036                     	ds	2
   325  000038                     _adc_res_4:
   326                           	opt stack 0
   327  000038                     	ds	2
   328  00003A                     _adc_res_3:
   329                           	opt stack 0
   330  00003A                     	ds	2
   331  00003C                     _adc_res_2:
   332                           	opt stack 0
   333  00003C                     	ds	2
   334  00003E                     _RB7_InterruptHandler_LOW:
   335                           	opt stack 0
   336  00003E                     	ds	2
   337  000040                     _RB6_InterruptHandler_LOW:
   338                           	opt stack 0
   339  000040                     	ds	2
   340  000042                     _RB5_InterruptHandler_LOW:
   341                           	opt stack 0
   342  000042                     	ds	2
   343  000044                     _RB4_InterruptHandler_LOW:
   344                           	opt stack 0
   345  000044                     	ds	2
   346  000046                     _RB7_InterruptHandler_HIGH:
   347                           	opt stack 0
   348  000046                     	ds	2
   349  000048                     _RB6_InterruptHandler_HIGH:
   350                           	opt stack 0
   351  000048                     	ds	2
   352  00004A                     _RB5_InterruptHandler_HIGH:
   353                           	opt stack 0
   354  00004A                     	ds	2
   355  00004C                     _RB4_InterruptHandler_HIGH:
   356                           	opt stack 0
   357  00004C                     	ds	2
   358  00004E                     _INT2_InterruptHandler:
   359                           	opt stack 0
   360  00004E                     	ds	2
   361  000050                     _INT1_InterruptHandler:
   362                           	opt stack 0
   363  000050                     	ds	2
   364  000052                     _INT0_InterruptHandler:
   365                           	opt stack 0
   366  000052                     	ds	2
   367  000054                     _flag:
   368                           	opt stack 0
   369  000054                     	ds	1
   370  000055                     _adc_flag:
   371                           	opt stack 0
   372  000055                     	ds	1
   373  000056                     _adc_res_1:
   374                           	opt stack 0
   375  000056                     	ds	2
   376                           tblptru	equ	0xFF8
   377                           tblptrh	equ	0xFF7
   378                           tblptrl	equ	0xFF6
   379                           tablat	equ	0xFF5
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           postdec1	equ	0xFE5
   383                           fsr1l	equ	0xFE1
   384                           
   385                           	psect	dataCOMRAM
   386  000001                     __pdataCOMRAM:
   387                           	opt stack 0
   388  000001                     _lat_register:
   389                           	opt stack 0
   390  000001                     	ds	10
   391  00000B                     _tris_register:
   392                           	opt stack 0
   393  00000B                     	ds	10
   394  000015                     _RB7_Flag:
   395                           	opt stack 0
   396  000015                     	ds	1
   397  000016                     _RB6_Flag:
   398                           	opt stack 0
   399  000016                     	ds	1
   400  000017                     _RB5_Flag:
   401                           	opt stack 0
   402  000017                     	ds	1
   403  000018                     _RB4_Flag:
   404                           	opt stack 0
   405  000018                     	ds	1
   406  000019                     _adc_4:
   407                           	opt stack 0
   408  000019                     	ds	6
   409  00001F                     _adc_3:
   410                           	opt stack 0
   411  00001F                     	ds	6
   412  000025                     _adc_2:
   413                           	opt stack 0
   414  000025                     	ds	6
   415  00002B                     _adc_1:
   416                           	opt stack 0
   417  00002B                     	ds	6
   418  000031                     _led5:
   419                           	opt stack 0
   420  000031                     	ds	1
   421  000032                     _led4:
   422                           	opt stack 0
   423  000032                     	ds	1
   424  000033                     _led3:
   425                           	opt stack 0
   426  000033                     	ds	1
   427  000034                     _led2:
   428                           	opt stack 0
   429  000034                     	ds	1
   430  000035                     _led1:
   431                           	opt stack 0
   432  000035                     	ds	1
   433                           tblptru	equ	0xFF8
   434                           tblptrh	equ	0xFF7
   435                           tblptrl	equ	0xFF6
   436                           tablat	equ	0xFF5
   437                           postinc0	equ	0xFEE
   438                           wreg	equ	0xFE8
   439                           postdec1	equ	0xFE5
   440                           fsr1l	equ	0xFE1
   441                           
   442                           	psect	dataBANK0
   443  000080                     __pdataBANK0:
   444                           	opt stack 0
   445  000080                     _keypad1:
   446                           	opt stack 0
   447  000080                     	ds	16
   448  000090                     _port_register:
   449                           	opt stack 0
   450  000090                     	ds	10
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           postdec1	equ	0xFE5
   458                           fsr1l	equ	0xFE1
   459                           
   460                           	psect	cstackBANK0
   461  00009A                     __pcstackBANK0:
   462                           	opt stack 0
   463  00009A                     ADC_input_channel_port_configure@channel:
   464                           	opt stack 0
   465  00009A                     led_initizlize@led:
   466                           	opt stack 0
   467  00009A                     ADC_StartConversion@adc_obj:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0x0
   471  00009A                     	ds	1
   472  00009B                     ADC_Init@adc_obj:
   473                           	opt stack 0
   474  00009B                     ADC_SelectChannel@adc_obj:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x1
   478  00009B                     	ds	1
   479  00009C                     ??_led_initizlize:
   480  00009C                     ADC_StartConversion@Local_Status:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x2
   484  00009C                     	ds	1
   485  00009D                     ??_ADC_Init:
   486  00009D                     ADC_SelectChannel@channel:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x3
   490  00009D                     	ds	1
   491  00009E                     ??_ADC_SelectChannel:
   492  00009E                     ADC_Init@Local_Status:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x4
   496  00009E                     	ds	1
   497  00009F                     ADC_SelectChannel@Local_Status:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x5
   501  00009F                     	ds	1
   502  0000A0                     ADC_StartConversion_Interrupt@adc_obj:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x6
   506  0000A0                     	ds	2
   507  0000A2                     led_initizlize@Local_Status:
   508                           	opt stack 0
   509  0000A2                     ADC_StartConversion_Interrupt@channel:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x8
   513  0000A2                     	ds	1
   514  0000A3                     ecu_layer_initialize@ret:
   515                           	opt stack 0
   516  0000A3                     ADC_StartConversion_Interrupt@Local_Status:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x9
   520  0000A3                     	ds	1
   521  0000A4                     tblptru	equ	0xFF8
   522                           tblptrh	equ	0xFF7
   523                           tblptrl	equ	0xFF6
   524                           tablat	equ	0xFF5
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           postdec1	equ	0xFE5
   528                           fsr1l	equ	0xFE1
   529                           
   530                           ; 1 bytes @ 0xA
   531                           
   532                           	psect	cstackCOMRAM
   533  000058                     __pcstackCOMRAM:
   534                           	opt stack 0
   535  000058                     RB4_ISR@source:
   536                           	opt stack 0
   537  000058                     RB5_ISR@source:
   538                           	opt stack 0
   539  000058                     RB6_ISR@source:
   540                           	opt stack 0
   541  000058                     RB7_ISR@source:
   542                           	opt stack 0
   543  000058                     ADC_GetConversionResult@adc_obj:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x0
   547  000058                     	ds	2
   548  00005A                     ADC_GetConversionResult@convesion_result:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x2
   552  00005A                     	ds	2
   553  00005C                     ??_ADC_GetConversionResult:
   554                           
   555                           ; 1 bytes @ 0x4
   556  00005C                     	ds	3
   557  00005F                     ADC_GetConversionResult@Local_Status:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x7
   561  00005F                     	ds	1
   562  000060                     ??_InterruptManager:
   563                           
   564                           ; 1 bytes @ 0x8
   565  000060                     	ds	14
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           postdec1	equ	0xFE5
   573                           fsr1l	equ	0xFE1
   574                           
   575 ;;
   576 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   577 ;;
   578 ;; *************** function _main *****************
   579 ;; Defined at:
   580 ;;		line 47 in file "application.c"
   581 ;; Parameters:    Size  Location     Type
   582 ;;		None
   583 ;; Auto vars:     Size  Location     Type
   584 ;;		None
   585 ;; Return value:  Size  Location     Type
   586 ;;                  2  1121[None  ] int 
   587 ;; Registers used:
   588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   589 ;; Tracked objects:
   590 ;;		On entry : 0/0
   591 ;;		On exit  : 0/0
   592 ;;		Unchanged: 0/0
   593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   598 ;;Total ram usage:        0 bytes
   599 ;; Hardware stack levels required when called:    7
   600 ;; This function calls:
   601 ;;		_ADC_StartConversion_Interrupt
   602 ;;		_functionInitialize
   603 ;; This function is called by:
   604 ;;		Startup code after reset
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608                           	psect	text0
   609  001688                     __ptext0:
   610                           	opt stack 0
   611  001688                     _main:
   612                           	opt stack 24
   613                           
   614                           ;application.c: 48: functionInitialize();
   615                           
   616                           ;incstack = 0
   617  001688  ECA3  F00A         	call	_functionInitialize	;wreg free
   618                           
   619                           ;application.c: 49: ADC_StartConversion_Interrupt(&adc_1,ADC_CHANEL_AN0);
   620  00168C  0E2B               	movlw	low _adc_1
   621  00168E  0100               	movlb	0	; () banked
   622  001690  6FA0               	movwf	ADC_StartConversion_Interrupt@adc_obj& (0+255),b
   623  001692  0E00               	movlw	high _adc_1
   624  001694  0100               	movlb	0	; () banked
   625  001696  6FA1               	movwf	(ADC_StartConversion_Interrupt@adc_obj+1)& (0+255),b
   626  001698  0E00               	movlw	0
   627  00169A  0100               	movlb	0	; () banked
   628  00169C  6FA2               	movwf	ADC_StartConversion_Interrupt@channel& (0+255),b
   629  00169E  ECC6  F00A         	call	_ADC_StartConversion_Interrupt	;wreg free
   630  0016A2                     l1122:
   631  0016A2  D7FF               	goto	l1122
   632  0016A4                     __end_of_main:
   633                           	opt stack 0
   634                           tblptru	equ	0xFF8
   635                           tblptrh	equ	0xFF7
   636                           tblptrl	equ	0xFF6
   637                           tablat	equ	0xFF5
   638                           postinc0	equ	0xFEE
   639                           wreg	equ	0xFE8
   640                           postdec1	equ	0xFE5
   641                           fsr1l	equ	0xFE1
   642                           
   643 ;; *************** function _functionInitialize *****************
   644 ;; Defined at:
   645 ;;		line 54 in file "application.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   663 ;;Total ram usage:        0 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; Hardware stack levels required when called:    6
   666 ;; This function calls:
   667 ;;		_ADC_Init
   668 ;;		_ecu_layer_initialize
   669 ;; This function is called by:
   670 ;;		_main
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text1
   675  001546                     __ptext1:
   676                           	opt stack 0
   677  001546                     _functionInitialize:
   678                           	opt stack 24
   679                           
   680                           ;application.c: 55: ecu_layer_initialize();
   681                           
   682                           ;incstack = 0
   683  001546  EC42  F00A         	call	_ecu_layer_initialize	;wreg free
   684                           
   685                           ;application.c: 56: ADC_Init(&adc_1);
   686  00154A  0E2B               	movlw	low _adc_1
   687  00154C  0100               	movlb	0	; () banked
   688  00154E  6F9B               	movwf	ADC_Init@adc_obj& (0+255),b
   689  001550  0E00               	movlw	high _adc_1
   690  001552  0100               	movlb	0	; () banked
   691  001554  6F9C               	movwf	(ADC_Init@adc_obj+1)& (0+255),b
   692  001556  ECE0  F008         	call	_ADC_Init	;wreg free
   693                           
   694                           ;application.c: 57: ADC_Init(&adc_2);
   695  00155A  0E25               	movlw	low _adc_2
   696  00155C  0100               	movlb	0	; () banked
   697  00155E  6F9B               	movwf	ADC_Init@adc_obj& (0+255),b
   698  001560  0E00               	movlw	high _adc_2
   699  001562  0100               	movlb	0	; () banked
   700  001564  6F9C               	movwf	(ADC_Init@adc_obj+1)& (0+255),b
   701  001566  ECE0  F008         	call	_ADC_Init	;wreg free
   702                           
   703                           ;application.c: 58: ADC_Init(&adc_3);
   704  00156A  0E1F               	movlw	low _adc_3
   705  00156C  0100               	movlb	0	; () banked
   706  00156E  6F9B               	movwf	ADC_Init@adc_obj& (0+255),b
   707  001570  0E00               	movlw	high _adc_3
   708  001572  0100               	movlb	0	; () banked
   709  001574  6F9C               	movwf	(ADC_Init@adc_obj+1)& (0+255),b
   710  001576  ECE0  F008         	call	_ADC_Init	;wreg free
   711                           
   712                           ;application.c: 59: ADC_Init(&adc_4);
   713  00157A  0E19               	movlw	low _adc_4
   714  00157C  0100               	movlb	0	; () banked
   715  00157E  6F9B               	movwf	ADC_Init@adc_obj& (0+255),b
   716  001580  0E00               	movlw	high _adc_4
   717  001582  0100               	movlb	0	; () banked
   718  001584  6F9C               	movwf	(ADC_Init@adc_obj+1)& (0+255),b
   719  001586  ECE0  F008         	call	_ADC_Init	;wreg free
   720  00158A  0012               	return		;funcret
   721  00158C                     __end_of_functionInitialize:
   722                           	opt stack 0
   723                           tblptru	equ	0xFF8
   724                           tblptrh	equ	0xFF7
   725                           tblptrl	equ	0xFF6
   726                           tablat	equ	0xFF5
   727                           postinc0	equ	0xFEE
   728                           wreg	equ	0xFE8
   729                           postdec1	equ	0xFE5
   730                           fsr1l	equ	0xFE1
   731                           
   732 ;; *************** function _ecu_layer_initialize *****************
   733 ;; Defined at:
   734 ;;		line 78 in file "ECU_Layer/ecu_layer_prog.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  ret             1    9[BANK0 ] unsigned char 
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      unsigned char 
   741 ;; Registers used:
   742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;Total ram usage:        1 bytes
   753 ;; Hardware stack levels used:    1
   754 ;; Hardware stack levels required when called:    5
   755 ;; This function calls:
   756 ;;		_led_initizlize
   757 ;; This function is called by:
   758 ;;		_functionInitialize
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text2
   763  001484                     __ptext2:
   764                           	opt stack 0
   765  001484                     _ecu_layer_initialize:
   766                           	opt stack 24
   767                           
   768                           ;ecu_layer_prog.c: 79: Std_ReturnType ret=(Std_ReturnType)0x00;
   769                           
   770                           ;incstack = 0
   771  001484  0E00               	movlw	0
   772  001486  0100               	movlb	0	; () banked
   773  001488  6FA3               	movwf	ecu_layer_initialize@ret& (0+255),b
   774                           
   775                           ; BSR set to: 0
   776                           ;ecu_layer_prog.c: 80: ret=led_initizlize(&led1);
   777  00148A  0E35               	movlw	low _led1
   778  00148C  0100               	movlb	0	; () banked
   779  00148E  6F9A               	movwf	led_initizlize@led& (0+255),b
   780  001490  0E00               	movlw	high _led1
   781  001492  0100               	movlb	0	; () banked
   782  001494  6F9B               	movwf	(led_initizlize@led+1)& (0+255),b
   783  001496  EC6F  F009         	call	_led_initizlize	;wreg free
   784  00149A  0100               	movlb	0	; () banked
   785  00149C  6FA3               	movwf	ecu_layer_initialize@ret& (0+255),b
   786                           
   787                           ; BSR set to: 0
   788                           ;ecu_layer_prog.c: 81: ret=led_initizlize(&led2);
   789  00149E  0E34               	movlw	low _led2
   790  0014A0  0100               	movlb	0	; () banked
   791  0014A2  6F9A               	movwf	led_initizlize@led& (0+255),b
   792  0014A4  0E00               	movlw	high _led2
   793  0014A6  0100               	movlb	0	; () banked
   794  0014A8  6F9B               	movwf	(led_initizlize@led+1)& (0+255),b
   795  0014AA  EC6F  F009         	call	_led_initizlize	;wreg free
   796  0014AE  0100               	movlb	0	; () banked
   797  0014B0  6FA3               	movwf	ecu_layer_initialize@ret& (0+255),b
   798                           
   799                           ; BSR set to: 0
   800                           ;ecu_layer_prog.c: 82: ret=led_initizlize(&led3);
   801  0014B2  0E33               	movlw	low _led3
   802  0014B4  0100               	movlb	0	; () banked
   803  0014B6  6F9A               	movwf	led_initizlize@led& (0+255),b
   804  0014B8  0E00               	movlw	high _led3
   805  0014BA  0100               	movlb	0	; () banked
   806  0014BC  6F9B               	movwf	(led_initizlize@led+1)& (0+255),b
   807  0014BE  EC6F  F009         	call	_led_initizlize	;wreg free
   808  0014C2  0100               	movlb	0	; () banked
   809  0014C4  6FA3               	movwf	ecu_layer_initialize@ret& (0+255),b
   810                           
   811                           ; BSR set to: 0
   812                           ;ecu_layer_prog.c: 83: ret=led_initizlize(&led4);
   813  0014C6  0E32               	movlw	low _led4
   814  0014C8  0100               	movlb	0	; () banked
   815  0014CA  6F9A               	movwf	led_initizlize@led& (0+255),b
   816  0014CC  0E00               	movlw	high _led4
   817  0014CE  0100               	movlb	0	; () banked
   818  0014D0  6F9B               	movwf	(led_initizlize@led+1)& (0+255),b
   819  0014D2  EC6F  F009         	call	_led_initizlize	;wreg free
   820  0014D6  0100               	movlb	0	; () banked
   821  0014D8  6FA3               	movwf	ecu_layer_initialize@ret& (0+255),b
   822                           
   823                           ; BSR set to: 0
   824                           ;ecu_layer_prog.c: 84: ret=led_initizlize(&led5);
   825  0014DA  0E31               	movlw	low _led5
   826  0014DC  0100               	movlb	0	; () banked
   827  0014DE  6F9A               	movwf	led_initizlize@led& (0+255),b
   828  0014E0  0E00               	movlw	high _led5
   829  0014E2  0100               	movlb	0	; () banked
   830  0014E4  6F9B               	movwf	(led_initizlize@led+1)& (0+255),b
   831  0014E6  EC6F  F009         	call	_led_initizlize	;wreg free
   832  0014EA  0100               	movlb	0	; () banked
   833  0014EC  6FA3               	movwf	ecu_layer_initialize@ret& (0+255),b
   834  0014EE  0012               	return	
   835  0014F0                     __end_of_ecu_layer_initialize:
   836                           	opt stack 0
   837                           tblptru	equ	0xFF8
   838                           tblptrh	equ	0xFF7
   839                           tblptrl	equ	0xFF6
   840                           tablat	equ	0xFF5
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           postdec1	equ	0xFE5
   844                           fsr1l	equ	0xFE1
   845                           
   846 ;; *************** function _led_initizlize *****************
   847 ;; Defined at:
   848 ;;		line 15 in file "ECU_Layer/LED_Driver/ecu_led_prog.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;  led             2    0[BANK0 ] PTR const struct .
   851 ;;		 -> led5(1), led4(1), led3(1), led2(1), 
   852 ;;		 -> led1(1), 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  Local_Status    1    8[BANK0 ] unsigned char 
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      unsigned char 
   857 ;; Registers used:
   858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   864 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   866 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   867 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   868 ;;Total ram usage:        9 bytes
   869 ;; Hardware stack levels used:    1
   870 ;; Hardware stack levels required when called:    4
   871 ;; This function calls:
   872 ;;		Nothing
   873 ;; This function is called by:
   874 ;;		_ecu_layer_initialize
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text3
   879  0012DE                     __ptext3:
   880                           	opt stack 0
   881  0012DE                     _led_initizlize:
   882                           	opt stack 24
   883                           
   884                           ;ecu_led_prog.c: 16: Std_ReturnType Local_Status=(Std_ReturnType)0x00;
   885                           
   886                           ; BSR set to: 0
   887                           ;incstack = 0
   888  0012DE  0E00               	movlw	0
   889  0012E0  0100               	movlb	0	; () banked
   890  0012E2  6FA2               	movwf	led_initizlize@Local_Status& (0+255),b
   891                           
   892                           ; BSR set to: 0
   893                           ;ecu_led_prog.c: 17: if((0) == led){
   894  0012E4  0100               	movlb	0	; () banked
   895  0012E6  519A               	movf	led_initizlize@led& (0+255),w,b
   896  0012E8  0100               	movlb	0	; () banked
   897  0012EA  119B               	iorwf	(led_initizlize@led+1)& (0+255),w,b
   898  0012EC  A4D8               	btfss	status,2,c
   899  0012EE  D002               	goto	l3684
   900                           
   901                           ; BSR set to: 0
   902                           ;ecu_led_prog.c: 18: Local_Status=(Std_ReturnType)0x00;
   903  0012F0  0E00               	movlw	0
   904  0012F2  D038               	goto	L1
   905  0012F4                     l3684:
   906                           
   907                           ; BSR set to: 0
   908                           ;ecu_led_prog.c: 20: (*tris_register[led->port_index] &= ~((uint8)1 << led->pin_num));
   909  0012F4  C09A  FFD9         	movff	led_initizlize@led,fsr2l
   910  0012F8  C09B  FFDA         	movff	led_initizlize@led+1,fsr2h
   911  0012FC  0100               	movlb	0	; () banked
   912  0012FE  38DF               	swapf	223,w,c
   913  001300  0B07               	andlw	7
   914  001302  0100               	movlb	0	; () banked
   915  001304  6F9C               	movwf	??_led_initizlize& (0+255),b
   916  001306  0E01               	movlw	1
   917  001308  0100               	movlb	0	; () banked
   918  00130A  6F9D               	movwf	(??_led_initizlize+1)& (0+255),b
   919  00130C  0100               	movlb	0	; () banked
   920  00130E  2B9C               	incf	??_led_initizlize& (0+255),f,b
   921  001310  D003               	goto	u2774
   922  001312                     u2775:
   923  001312  0100               	movlb	0	; () banked
   924  001314  90D8               	bcf	status,0,c
   925  001316  379D               	rlcf	(??_led_initizlize+1)& (0+255),f,b
   926  001318                     u2774:
   927  001318  0100               	movlb	0	; () banked
   928  00131A  2F9C               	decfsz	??_led_initizlize& (0+255),f,b
   929  00131C  D7FA               	goto	u2775
   930  00131E  0100               	movlb	0	; () banked
   931  001320  519D               	movf	(??_led_initizlize+1)& (0+255),w,b
   932  001322  0AFF               	xorlw	255
   933  001324  0100               	movlb	0	; () banked
   934  001326  6F9E               	movwf	(??_led_initizlize+2)& (0+255),b
   935  001328  C09A  FFD9         	movff	led_initizlize@led,fsr2l
   936  00132C  C09B  FFDA         	movff	led_initizlize@led+1,fsr2h
   937  001330  0100               	movlb	0	; () banked
   938  001332  50DF               	movf	223,w,c
   939  001334  0B0F               	andlw	15
   940  001336  0100               	movlb	0	; () banked
   941  001338  6F9F               	movwf	(??_led_initizlize+3)& (0+255),b
   942  00133A  0100               	movlb	0	; () banked
   943  00133C  519F               	movf	(??_led_initizlize+3)& (0+255),w,b
   944  00133E  0D02               	mullw	2
   945  001340  0E0B               	movlw	low _tris_register
   946  001342  24F3               	addwf	prodl,w,c
   947  001344  6ED9               	movwf	fsr2l,c
   948  001346  0E00               	movlw	high _tris_register
   949  001348  20F4               	addwfc	prodh,w,c
   950  00134A  6EDA               	movwf	fsr2h,c
   951  00134C  CFDE F0A0          	movff	postinc2,??_led_initizlize+4
   952  001350  CFDD F0A1          	movff	postdec2,??_led_initizlize+5
   953  001354  C0A0  FFD9         	movff	??_led_initizlize+4,fsr2l
   954  001358  C0A1  FFDA         	movff	??_led_initizlize+5,fsr2h
   955  00135C  0100               	movlb	0	; () banked
   956  00135E  519E               	movf	(??_led_initizlize+2)& (0+255),w,b
   957  001360  16DF               	andwf	indf2,f,c
   958                           
   959                           ; BSR set to: 0
   960                           ;ecu_led_prog.c: 21: Local_Status=(Std_ReturnType)0x01;
   961  001362  0E01               	movlw	1
   962  001364                     L1:
   963  001364  0100               	movlb	0	; () banked
   964  001366  6FA2               	movwf	led_initizlize@Local_Status& (0+255),b
   965                           
   966                           ; BSR set to: 0
   967                           ;ecu_led_prog.c: 22: }
   968                           ;ecu_led_prog.c: 23: return Local_Status;
   969                           
   970                           ; BSR set to: 0
   971  001368  0100               	movlb	0	; () banked
   972  00136A  51A2               	movf	led_initizlize@Local_Status& (0+255),w,b
   973  00136C  0012               	return	
   974  00136E                     __end_of_led_initizlize:
   975                           	opt stack 0
   976                           tblptru	equ	0xFF8
   977                           tblptrh	equ	0xFF7
   978                           tblptrl	equ	0xFF6
   979                           tablat	equ	0xFF5
   980                           prodh	equ	0xFF4
   981                           prodl	equ	0xFF3
   982                           postinc0	equ	0xFEE
   983                           wreg	equ	0xFE8
   984                           postdec1	equ	0xFE5
   985                           fsr1l	equ	0xFE1
   986                           indf2	equ	0xFDF
   987                           postinc2	equ	0xFDE
   988                           postdec2	equ	0xFDD
   989                           fsr2h	equ	0xFDA
   990                           fsr2l	equ	0xFD9
   991                           status	equ	0xFD8
   992                           
   993 ;; *************** function _ADC_Init *****************
   994 ;; Defined at:
   995 ;;		line 20 in file "MCAL_Layer/ADC_Driver/mcal_adc_prog.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  adc_obj         2    1[BANK0 ] PTR const struct .
   998 ;;		 -> adc_4(6), adc_3(6), adc_2(6), adc_1(6), 
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  Local_Status    1    4[BANK0 ] unsigned char 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      unsigned char 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1010 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1013 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1014 ;;Total ram usage:        4 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    5
  1017 ;; This function calls:
  1018 ;;		_ADC_input_channel_port_configure
  1019 ;; This function is called by:
  1020 ;;		_functionInitialize
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           	psect	text4
  1025  0011C0                     __ptext4:
  1026                           	opt stack 0
  1027  0011C0                     _ADC_Init:
  1028                           	opt stack 24
  1029                           
  1030                           ;mcal_adc_prog.c: 21: Std_ReturnType Local_Status=(Std_ReturnType)0x00;
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;incstack = 0
  1034  0011C0  0E00               	movlw	0
  1035  0011C2  0100               	movlb	0	; () banked
  1036  0011C4  6F9E               	movwf	ADC_Init@Local_Status& (0+255),b
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;mcal_adc_prog.c: 22: if(adc_obj==(0)){
  1040  0011C6  0100               	movlb	0	; () banked
  1041  0011C8  519B               	movf	ADC_Init@adc_obj& (0+255),w,b
  1042  0011CA  0100               	movlb	0	; () banked
  1043  0011CC  119C               	iorwf	(ADC_Init@adc_obj+1)& (0+255),w,b
  1044  0011CE  A4D8               	btfss	status,2,c
  1045  0011D0  D004               	goto	l3796
  1046                           
  1047                           ; BSR set to: 0
  1048                           ;mcal_adc_prog.c: 23: Local_Status=(Std_ReturnType)0x00;
  1049  0011D2  0E00               	movlw	0
  1050  0011D4  0100               	movlb	0	; () banked
  1051  0011D6  6F9E               	movwf	ADC_Init@Local_Status& (0+255),b
  1052                           
  1053                           ;mcal_adc_prog.c: 24: }else{
  1054  0011D8  0012               	return	
  1055  0011DA                     l3796:
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;mcal_adc_prog.c: 25: ADC_InterruptHandeler=adc_obj->ADC_InterruptHandeler;
  1059  0011DA  C09B  FFD9         	movff	ADC_Init@adc_obj,fsr2l
  1060  0011DE  C09C  FFDA         	movff	ADC_Init@adc_obj+1,fsr2h
  1061  0011E2  CFDE F036          	movff	postinc2,_ADC_InterruptHandeler
  1062  0011E6  CFDD F037          	movff	postdec2,_ADC_InterruptHandeler+1
  1063                           
  1064                           ; BSR set to: 0
  1065                           ;mcal_adc_prog.c: 27: (ADCON0bits.ADON=0);
  1066  0011EA  90C2               	bcf	4034,0,c	;volatile
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;mcal_adc_prog.c: 29: ADCON2bits.ACQT=adc_obj->acquasition_time;
  1070  0011EC  0100               	movlb	0	; () banked
  1071  0011EE  EE20 F002          	lfsr	2,2
  1072  0011F2  519B               	movf	ADC_Init@adc_obj& (0+255),w,b
  1073  0011F4  26D9               	addwf	fsr2l,f,c
  1074  0011F6  519C               	movf	(ADC_Init@adc_obj+1)& (0+255),w,b
  1075  0011F8  22DA               	addwfc	fsr2h,f,c
  1076  0011FA  50DF               	movf	indf2,w,c
  1077  0011FC  0100               	movlb	0	; () banked
  1078  0011FE  6F9D               	movwf	??_ADC_Init& (0+255),b
  1079  001200  0100               	movlb	0	; () banked
  1080  001202  479D               	rlncf	??_ADC_Init& (0+255),f,b
  1081  001204  479D               	rlncf	??_ADC_Init& (0+255),f,b
  1082  001206  479D               	rlncf	??_ADC_Init& (0+255),f,b
  1083  001208  50C0               	movf	4032,w,c	;volatile
  1084  00120A  0100               	movlb	0	; () banked
  1085  00120C  199D               	xorwf	??_ADC_Init& (0+255),w,b
  1086  00120E  0BC7               	andlw	-57
  1087  001210  199D               	xorwf	??_ADC_Init& (0+255),w,b
  1088  001212  6EC0               	movwf	4032,c	;volatile
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;mcal_adc_prog.c: 31: ADCON2bits.ADCS=adc_obj->conversion_clock;
  1092  001214  0100               	movlb	0	; () banked
  1093  001216  EE20 F003          	lfsr	2,3
  1094  00121A  519B               	movf	ADC_Init@adc_obj& (0+255),w,b
  1095  00121C  26D9               	addwf	fsr2l,f,c
  1096  00121E  519C               	movf	(ADC_Init@adc_obj+1)& (0+255),w,b
  1097  001220  22DA               	addwfc	fsr2h,f,c
  1098  001222  50DF               	movf	indf2,w,c
  1099  001224  0100               	movlb	0	; () banked
  1100  001226  6F9D               	movwf	??_ADC_Init& (0+255),b
  1101  001228  50C0               	movf	4032,w,c	;volatile
  1102  00122A  0100               	movlb	0	; () banked
  1103  00122C  199D               	xorwf	??_ADC_Init& (0+255),w,b
  1104  00122E  0BF8               	andlw	-8
  1105  001230  199D               	xorwf	??_ADC_Init& (0+255),w,b
  1106  001232  6EC0               	movwf	4032,c	;volatile
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;mcal_adc_prog.c: 33: ADCON0bits.CHS=adc_obj->channel_selected;
  1110  001234  0100               	movlb	0	; () banked
  1111  001236  EE20 F004          	lfsr	2,4
  1112  00123A  519B               	movf	ADC_Init@adc_obj& (0+255),w,b
  1113  00123C  26D9               	addwf	fsr2l,f,c
  1114  00123E  519C               	movf	(ADC_Init@adc_obj+1)& (0+255),w,b
  1115  001240  22DA               	addwfc	fsr2h,f,c
  1116  001242  50DF               	movf	indf2,w,c
  1117  001244  0100               	movlb	0	; () banked
  1118  001246  6F9D               	movwf	??_ADC_Init& (0+255),b
  1119  001248  0100               	movlb	0	; () banked
  1120  00124A  479D               	rlncf	??_ADC_Init& (0+255),f,b
  1121  00124C  479D               	rlncf	??_ADC_Init& (0+255),f,b
  1122  00124E  50C2               	movf	4034,w,c	;volatile
  1123  001250  0100               	movlb	0	; () banked
  1124  001252  199D               	xorwf	??_ADC_Init& (0+255),w,b
  1125  001254  0BC3               	andlw	-61
  1126  001256  199D               	xorwf	??_ADC_Init& (0+255),w,b
  1127  001258  6EC2               	movwf	4034,c	;volatile
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;mcal_adc_prog.c: 34: ADC_input_channel_port_configure(adc_obj->channel_selected);
  1131  00125A  0100               	movlb	0	; () banked
  1132  00125C  EE20 F004          	lfsr	2,4
  1133  001260  519B               	movf	ADC_Init@adc_obj& (0+255),w,b
  1134  001262  26D9               	addwf	fsr2l,f,c
  1135  001264  519C               	movf	(ADC_Init@adc_obj+1)& (0+255),w,b
  1136  001266  22DA               	addwfc	fsr2h,f,c
  1137  001268  50DF               	movf	indf2,w,c
  1138  00126A  ECB7  F009         	call	_ADC_input_channel_port_configure
  1139                           
  1140                           ;mcal_adc_prog.c: 37: (INTCONbits.GIE = 1);
  1141  00126E  8EF2               	bsf	intcon,7,c	;volatile
  1142                           
  1143                           ;mcal_adc_prog.c: 38: (INTCONbits.PEIE = 1);
  1144  001270  8CF2               	bsf	intcon,6,c	;volatile
  1145                           
  1146                           ;mcal_adc_prog.c: 39: (PIE1bits.ADIE=1);
  1147  001272  8C9D               	bsf	3997,6,c	;volatile
  1148                           
  1149                           ;mcal_adc_prog.c: 40: (PIR1bits.ADIF=0);
  1150  001274  9C9E               	bcf	3998,6,c	;volatile
  1151                           
  1152                           ;mcal_adc_prog.c: 57: if(adc_obj->result_format==0x01U){
  1153  001276  0100               	movlb	0	; () banked
  1154  001278  EE20 F005          	lfsr	2,5
  1155  00127C  519B               	movf	ADC_Init@adc_obj& (0+255),w,b
  1156  00127E  26D9               	addwf	fsr2l,f,c
  1157  001280  519C               	movf	(ADC_Init@adc_obj+1)& (0+255),w,b
  1158  001282  22DA               	addwfc	fsr2h,f,c
  1159  001284  0100               	movlb	0	; () banked
  1160  001286  A2DF               	btfss	indf2,1,c
  1161  001288  D002               	goto	l3820
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;mcal_adc_prog.c: 58: (ADCON2bits.ADFM=1);
  1165  00128A  8EC0               	bsf	4032,7,c	;volatile
  1166                           
  1167                           ;mcal_adc_prog.c: 59: }else if(adc_obj->result_format==0x00U){
  1168  00128C  D00A               	goto	l3824
  1169  00128E                     l3820:
  1170                           
  1171                           ; BSR set to: 0
  1172  00128E  0100               	movlb	0	; () banked
  1173  001290  EE20 F005          	lfsr	2,5
  1174  001294  519B               	movf	ADC_Init@adc_obj& (0+255),w,b
  1175  001296  26D9               	addwf	fsr2l,f,c
  1176  001298  519C               	movf	(ADC_Init@adc_obj+1)& (0+255),w,b
  1177  00129A  22DA               	addwfc	fsr2h,f,c
  1178  00129C  0100               	movlb	0	; () banked
  1179  00129E  A2DF               	btfss	indf2,1,c
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;mcal_adc_prog.c: 60: (ADCON2bits.ADFM=0);
  1183  0012A0  9EC0               	bcf	4032,7,c	;volatile
  1184  0012A2                     l3824:
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;mcal_adc_prog.c: 61: }
  1188                           ;mcal_adc_prog.c: 63: if((adc_obj->voltage_reference) == 0){
  1189  0012A2  0100               	movlb	0	; () banked
  1190  0012A4  EE20 F005          	lfsr	2,5
  1191  0012A8  519B               	movf	ADC_Init@adc_obj& (0+255),w,b
  1192  0012AA  26D9               	addwf	fsr2l,f,c
  1193  0012AC  519C               	movf	(ADC_Init@adc_obj+1)& (0+255),w,b
  1194  0012AE  22DA               	addwfc	fsr2h,f,c
  1195  0012B0  0100               	movlb	0	; () banked
  1196  0012B2  B0DF               	btfsc	indf2,0,c
  1197  0012B4  D003               	goto	l3826
  1198                           
  1199                           ; BSR set to: 0
  1200                           
  1201                           ;mcal_adc_prog.c: 64: do{ADCON1bits.VCFG1=1; ADCON1bits.VCFG0=1; }while(0);;
  1202  0012B6  8AC1               	bsf	4033,5,c	;volatile
  1203  0012B8  88C1               	bsf	4033,4,c	;volatile
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;mcal_adc_prog.c: 65: }else if(( adc_obj->voltage_reference) == 1){
  1207  0012BA  D00C               	goto	l1197
  1208  0012BC                     l3826:
  1209                           
  1210                           ; BSR set to: 0
  1211  0012BC  0100               	movlb	0	; () banked
  1212  0012BE  EE20 F005          	lfsr	2,5
  1213  0012C2  519B               	movf	ADC_Init@adc_obj& (0+255),w,b
  1214  0012C4  26D9               	addwf	fsr2l,f,c
  1215  0012C6  519C               	movf	(ADC_Init@adc_obj+1)& (0+255),w,b
  1216  0012C8  22DA               	addwfc	fsr2h,f,c
  1217  0012CA  0100               	movlb	0	; () banked
  1218  0012CC  A0DF               	btfss	indf2,0,c
  1219  0012CE  D002               	goto	l1197
  1220                           
  1221                           ; BSR set to: 0
  1222                           
  1223                           ;mcal_adc_prog.c: 66: do{ADCON1bits.VCFG1=0; ADCON1bits.VCFG0=0; }while(0);;
  1224  0012D0  9AC1               	bcf	4033,5,c	;volatile
  1225  0012D2  98C1               	bcf	4033,4,c	;volatile
  1226  0012D4                     l1197:
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;mcal_adc_prog.c: 67: }
  1230                           ;mcal_adc_prog.c: 69: (ADCON0bits.ADON=1);
  1231  0012D4  80C2               	bsf	4034,0,c	;volatile
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;mcal_adc_prog.c: 70: Local_Status=(Std_ReturnType)0x01;
  1235  0012D6  0E01               	movlw	1
  1236  0012D8  0100               	movlb	0	; () banked
  1237  0012DA  6F9E               	movwf	ADC_Init@Local_Status& (0+255),b
  1238                           
  1239                           ; BSR set to: 0
  1240  0012DC  0012               	return	
  1241  0012DE                     __end_of_ADC_Init:
  1242                           	opt stack 0
  1243                           tblptru	equ	0xFF8
  1244                           tblptrh	equ	0xFF7
  1245                           tblptrl	equ	0xFF6
  1246                           tablat	equ	0xFF5
  1247                           prodh	equ	0xFF4
  1248                           prodl	equ	0xFF3
  1249                           intcon	equ	0xFF2
  1250                           postinc0	equ	0xFEE
  1251                           wreg	equ	0xFE8
  1252                           postdec1	equ	0xFE5
  1253                           fsr1l	equ	0xFE1
  1254                           indf2	equ	0xFDF
  1255                           postinc2	equ	0xFDE
  1256                           postdec2	equ	0xFDD
  1257                           fsr2h	equ	0xFDA
  1258                           fsr2l	equ	0xFD9
  1259                           status	equ	0xFD8
  1260                           
  1261 ;; *************** function _ADC_StartConversion_Interrupt *****************
  1262 ;; Defined at:
  1263 ;;		line 215 in file "MCAL_Layer/ADC_Driver/mcal_adc_prog.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;  adc_obj         2    6[BANK0 ] PTR const struct .
  1266 ;;		 -> adc_1(6), 
  1267 ;;  channel         1    8[BANK0 ] enum E3148
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;  Local_Status    1    9[BANK0 ] unsigned char 
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  1    wreg      unsigned char 
  1272 ;; Registers used:
  1273 ;;		wreg, status,2, status,0, cstack
  1274 ;; Tracked objects:
  1275 ;;		On entry : 0/0
  1276 ;;		On exit  : 0/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1279 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1282 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;Total ram usage:        4 bytes
  1284 ;; Hardware stack levels used:    1
  1285 ;; Hardware stack levels required when called:    6
  1286 ;; This function calls:
  1287 ;;		_ADC_SelectChannel
  1288 ;;		_ADC_StartConversion
  1289 ;; This function is called by:
  1290 ;;		_main
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text5
  1295  00158C                     __ptext5:
  1296                           	opt stack 0
  1297  00158C                     _ADC_StartConversion_Interrupt:
  1298                           	opt stack 24
  1299                           
  1300                           ;mcal_adc_prog.c: 216: Std_ReturnType Local_Status=(Std_ReturnType)0x00;
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;incstack = 0
  1304  00158C  0E00               	movlw	0
  1305  00158E  0100               	movlb	0	; () banked
  1306  001590  6FA3               	movwf	ADC_StartConversion_Interrupt@Local_Status& (0+255),b
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;mcal_adc_prog.c: 217: if(adc_obj==(0)){
  1310  001592  0100               	movlb	0	; () banked
  1311  001594  51A0               	movf	ADC_StartConversion_Interrupt@adc_obj& (0+255),w,b
  1312  001596  0100               	movlb	0	; () banked
  1313  001598  11A1               	iorwf	(ADC_StartConversion_Interrupt@adc_obj+1)& (0+255),w,b
  1314  00159A  A4D8               	btfss	status,2,c
  1315  00159C  D004               	goto	l1241
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;mcal_adc_prog.c: 218: Local_Status=(Std_ReturnType)0x00;
  1319  00159E  0E00               	movlw	0
  1320  0015A0  0100               	movlb	0	; () banked
  1321  0015A2  6FA3               	movwf	ADC_StartConversion_Interrupt@Local_Status& (0+255),b
  1322                           
  1323                           ;mcal_adc_prog.c: 219: }else{
  1324  0015A4  0012               	return	
  1325  0015A6                     l1241:
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;mcal_adc_prog.c: 220: (PIR1bits.ADIF=0);
  1329  0015A6  9C9E               	bcf	3998,6,c	;volatile
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;mcal_adc_prog.c: 222: Local_Status |= ADC_SelectChannel(adc_obj,channel);
  1333  0015A8  C0A0  F09B         	movff	ADC_StartConversion_Interrupt@adc_obj,ADC_SelectChannel@adc_obj
  1334  0015AC  C0A1  F09C         	movff	ADC_StartConversion_Interrupt@adc_obj+1,ADC_SelectChannel@adc_obj+1
  1335  0015B0  C0A2  F09D         	movff	ADC_StartConversion_Interrupt@channel,ADC_SelectChannel@channel
  1336  0015B4  ECE7  F00A         	call	_ADC_SelectChannel	;wreg free
  1337  0015B8  0100               	movlb	0	; () banked
  1338  0015BA  13A3               	iorwf	ADC_StartConversion_Interrupt@Local_Status& (0+255),f,b
  1339                           
  1340                           ;mcal_adc_prog.c: 224: Local_Status |= ADC_StartConversion(adc_obj);
  1341  0015BC  C0A0  F09A         	movff	ADC_StartConversion_Interrupt@adc_obj,ADC_StartConversion@adc_obj
  1342  0015C0  C0A1  F09B         	movff	ADC_StartConversion_Interrupt@adc_obj+1,ADC_StartConversion@adc_obj+1
  1343  0015C4  EC22  F00B         	call	_ADC_StartConversion	;wreg free
  1344  0015C8  0100               	movlb	0	; () banked
  1345  0015CA  13A3               	iorwf	ADC_StartConversion_Interrupt@Local_Status& (0+255),f,b
  1346                           
  1347                           ; BSR set to: 0
  1348  0015CC  0012               	return	
  1349  0015CE                     __end_of_ADC_StartConversion_Interrupt:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           prodh	equ	0xFF4
  1356                           prodl	equ	0xFF3
  1357                           intcon	equ	0xFF2
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           postdec1	equ	0xFE5
  1361                           fsr1l	equ	0xFE1
  1362                           indf2	equ	0xFDF
  1363                           postinc2	equ	0xFDE
  1364                           postdec2	equ	0xFDD
  1365                           fsr2h	equ	0xFDA
  1366                           fsr2l	equ	0xFD9
  1367                           status	equ	0xFD8
  1368                           
  1369 ;; *************** function _ADC_StartConversion *****************
  1370 ;; Defined at:
  1371 ;;		line 108 in file "MCAL_Layer/ADC_Driver/mcal_adc_prog.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  adc_obj         2    0[BANK0 ] PTR const struct .
  1374 ;;		 -> adc_1(6), 
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  Local_Status    1    2[BANK0 ] unsigned char 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      unsigned char 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2, status,0
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1386 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;Total ram usage:        3 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    4
  1393 ;; This function calls:
  1394 ;;		Nothing
  1395 ;; This function is called by:
  1396 ;;		_ADC_StartConversion_Interrupt
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text6
  1401  001644                     __ptext6:
  1402                           	opt stack 0
  1403  001644                     _ADC_StartConversion:
  1404                           	opt stack 25
  1405                           
  1406                           ;mcal_adc_prog.c: 109: Std_ReturnType Local_Status=(Std_ReturnType)0x00;
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;incstack = 0
  1410  001644  0E00               	movlw	0
  1411  001646  0100               	movlb	0	; () banked
  1412  001648  6F9C               	movwf	ADC_StartConversion@Local_Status& (0+255),b
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;mcal_adc_prog.c: 110: if(adc_obj==(0)){
  1416  00164A  0100               	movlb	0	; () banked
  1417  00164C  519A               	movf	ADC_StartConversion@adc_obj& (0+255),w,b
  1418  00164E  0100               	movlb	0	; () banked
  1419  001650  119B               	iorwf	(ADC_StartConversion@adc_obj+1)& (0+255),w,b
  1420  001652  A4D8               	btfss	status,2,c
  1421  001654  D002               	goto	l1209
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;mcal_adc_prog.c: 111: Local_Status=(Std_ReturnType)0x00;
  1425  001656  0E00               	movlw	0
  1426  001658  D002               	goto	L2
  1427  00165A                     l1209:
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;mcal_adc_prog.c: 114: (ADCON0bits.GO_DONE=1);
  1431  00165A  82C2               	bsf	4034,1,c	;volatile
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;mcal_adc_prog.c: 115: Local_Status=(Std_ReturnType)0x01;
  1435  00165C  0E01               	movlw	1
  1436  00165E                     L2:
  1437  00165E  0100               	movlb	0	; () banked
  1438  001660  6F9C               	movwf	ADC_StartConversion@Local_Status& (0+255),b
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;mcal_adc_prog.c: 116: }
  1442                           ;mcal_adc_prog.c: 117: return Local_Status;
  1443  001662  0100               	movlb	0	; () banked
  1444  001664  519C               	movf	ADC_StartConversion@Local_Status& (0+255),w,b
  1445  001666  0012               	return	
  1446  001668                     __end_of_ADC_StartConversion:
  1447                           	opt stack 0
  1448                           tblptru	equ	0xFF8
  1449                           tblptrh	equ	0xFF7
  1450                           tblptrl	equ	0xFF6
  1451                           tablat	equ	0xFF5
  1452                           prodh	equ	0xFF4
  1453                           prodl	equ	0xFF3
  1454                           intcon	equ	0xFF2
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           postdec1	equ	0xFE5
  1458                           fsr1l	equ	0xFE1
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           postdec2	equ	0xFDD
  1462                           fsr2h	equ	0xFDA
  1463                           fsr2l	equ	0xFD9
  1464                           status	equ	0xFD8
  1465                           
  1466 ;; *************** function _ADC_SelectChannel *****************
  1467 ;; Defined at:
  1468 ;;		line 127 in file "MCAL_Layer/ADC_Driver/mcal_adc_prog.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;  adc_obj         2    1[BANK0 ] PTR const struct .
  1471 ;;		 -> adc_1(6), 
  1472 ;;  channel         1    3[BANK0 ] enum E3148
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  Local_Status    1    5[BANK0 ] unsigned char 
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      unsigned char 
  1477 ;; Registers used:
  1478 ;;		wreg, status,2, status,0, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1484 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;Total ram usage:        5 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:    5
  1491 ;; This function calls:
  1492 ;;		_ADC_input_channel_port_configure
  1493 ;; This function is called by:
  1494 ;;		_ADC_StartConversion_Interrupt
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text7
  1499  0015CE                     __ptext7:
  1500                           	opt stack 0
  1501  0015CE                     _ADC_SelectChannel:
  1502                           	opt stack 24
  1503                           
  1504                           ;mcal_adc_prog.c: 128: Std_ReturnType Local_Status=(Std_ReturnType)0x00;
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;incstack = 0
  1508  0015CE  0E00               	movlw	0
  1509  0015D0  0100               	movlb	0	; () banked
  1510  0015D2  6F9F               	movwf	ADC_SelectChannel@Local_Status& (0+255),b
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;mcal_adc_prog.c: 129: if(adc_obj==(0)){
  1514  0015D4  0100               	movlb	0	; () banked
  1515  0015D6  519B               	movf	ADC_SelectChannel@adc_obj& (0+255),w,b
  1516  0015D8  0100               	movlb	0	; () banked
  1517  0015DA  119C               	iorwf	(ADC_SelectChannel@adc_obj+1)& (0+255),w,b
  1518  0015DC  A4D8               	btfss	status,2,c
  1519  0015DE  D002               	goto	l3848
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;mcal_adc_prog.c: 130: Local_Status=(Std_ReturnType)0x00;
  1523  0015E0  0E00               	movlw	0
  1524  0015E2  D010               	goto	L3
  1525  0015E4                     l3848:
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;mcal_adc_prog.c: 132: ADCON0bits.CHS=channel;
  1529  0015E4  C09D  F09E         	movff	ADC_SelectChannel@channel,??_ADC_SelectChannel
  1530  0015E8  0100               	movlb	0	; () banked
  1531  0015EA  479E               	rlncf	??_ADC_SelectChannel& (0+255),f,b
  1532  0015EC  479E               	rlncf	??_ADC_SelectChannel& (0+255),f,b
  1533  0015EE  50C2               	movf	4034,w,c	;volatile
  1534  0015F0  0100               	movlb	0	; () banked
  1535  0015F2  199E               	xorwf	??_ADC_SelectChannel& (0+255),w,b
  1536  0015F4  0BC3               	andlw	-61
  1537  0015F6  199E               	xorwf	??_ADC_SelectChannel& (0+255),w,b
  1538  0015F8  6EC2               	movwf	4034,c	;volatile
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;mcal_adc_prog.c: 133: ADC_input_channel_port_configure(channel);
  1542  0015FA  0100               	movlb	0	; () banked
  1543  0015FC  519D               	movf	ADC_SelectChannel@channel& (0+255),w,b
  1544  0015FE  ECB7  F009         	call	_ADC_input_channel_port_configure
  1545                           
  1546                           ;mcal_adc_prog.c: 134: Local_Status=(Std_ReturnType)0x01;
  1547  001602  0E01               	movlw	1
  1548  001604                     L3:
  1549  001604  0100               	movlb	0	; () banked
  1550  001606  6F9F               	movwf	ADC_SelectChannel@Local_Status& (0+255),b
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;mcal_adc_prog.c: 135: }
  1554                           ;mcal_adc_prog.c: 136: return Local_Status;
  1555                           
  1556                           ; BSR set to: 0
  1557  001608  0100               	movlb	0	; () banked
  1558  00160A  519F               	movf	ADC_SelectChannel@Local_Status& (0+255),w,b
  1559  00160C  0012               	return	
  1560  00160E                     __end_of_ADC_SelectChannel:
  1561                           	opt stack 0
  1562                           tblptru	equ	0xFF8
  1563                           tblptrh	equ	0xFF7
  1564                           tblptrl	equ	0xFF6
  1565                           tablat	equ	0xFF5
  1566                           prodh	equ	0xFF4
  1567                           prodl	equ	0xFF3
  1568                           intcon	equ	0xFF2
  1569                           postinc0	equ	0xFEE
  1570                           wreg	equ	0xFE8
  1571                           postdec1	equ	0xFE5
  1572                           fsr1l	equ	0xFE1
  1573                           indf2	equ	0xFDF
  1574                           postinc2	equ	0xFDE
  1575                           postdec2	equ	0xFDD
  1576                           fsr2h	equ	0xFDA
  1577                           fsr2l	equ	0xFD9
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function _ADC_input_channel_port_configure *****************
  1581 ;; Defined at:
  1582 ;;		line 229 in file "MCAL_Layer/ADC_Driver/mcal_adc_prog.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;  channel         1    wreg     enum E3148
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  channel         1    0[BANK0 ] enum E3148
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      unsigned char 
  1589 ;; Registers used:
  1590 ;;		wreg, status,2, status,0
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1599 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;Total ram usage:        1 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:    4
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_ADC_Init
  1607 ;;		_ADC_SelectChannel
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text8
  1612  00136E                     __ptext8:
  1613                           	opt stack 0
  1614  00136E                     _ADC_input_channel_port_configure:
  1615                           	opt stack 24
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;incstack = 0
  1619                           ;ADC_input_channel_port_configure@channel stored from wreg
  1620  00136E  0100               	movlb	0	; () banked
  1621  001370  6F9A               	movwf	ADC_input_channel_port_configure@channel& (0+255),b
  1622                           
  1623                           ;mcal_adc_prog.c: 230: switch(channel){
  1624  001372  D01A               	goto	l3774
  1625  001374                     l3694:
  1626                           
  1627                           ;mcal_adc_prog.c: 232: (TRISA |= ((uint8)1 << 0x0));
  1628  001374  8092               	bsf	3986,0,c	;volatile
  1629                           
  1630                           ;mcal_adc_prog.c: 234: break;
  1631                           
  1632                           ;mcal_adc_prog.c: 233: return (Std_ReturnType)0x01;
  1633                           ;	Return value of _ADC_input_channel_port_configure is never used
  1634  001376  0012               	return	
  1635  001378                     l3700:
  1636                           
  1637                           ;mcal_adc_prog.c: 236: (TRISA |= ((uint8)1 << 0x1));
  1638  001378  8292               	bsf	3986,1,c	;volatile
  1639                           
  1640                           ;mcal_adc_prog.c: 238: break;
  1641                           
  1642                           ;mcal_adc_prog.c: 237: return (Std_ReturnType)0x01;
  1643                           ;	Return value of _ADC_input_channel_port_configure is never used
  1644  00137A  0012               	return	
  1645  00137C                     l3706:
  1646                           
  1647                           ;mcal_adc_prog.c: 240: (TRISA |= ((uint8)1 << 0x2));
  1648  00137C  8492               	bsf	3986,2,c	;volatile
  1649                           
  1650                           ;mcal_adc_prog.c: 242: break;
  1651                           
  1652                           ;mcal_adc_prog.c: 241: return (Std_ReturnType)0x01;
  1653                           ;	Return value of _ADC_input_channel_port_configure is never used
  1654  00137E  0012               	return	
  1655  001380                     l3712:
  1656                           
  1657                           ;mcal_adc_prog.c: 244: (TRISA |= ((uint8)1 << 0x3));
  1658  001380  8692               	bsf	3986,3,c	;volatile
  1659                           
  1660                           ;mcal_adc_prog.c: 246: break;
  1661                           
  1662                           ;mcal_adc_prog.c: 245: return (Std_ReturnType)0x01;
  1663                           ;	Return value of _ADC_input_channel_port_configure is never used
  1664  001382  0012               	return	
  1665  001384                     l3718:
  1666                           
  1667                           ;mcal_adc_prog.c: 248: (TRISA |= ((uint8)1 << 0x5));
  1668  001384  8A92               	bsf	3986,5,c	;volatile
  1669                           
  1670                           ;mcal_adc_prog.c: 250: break;
  1671                           
  1672                           ;mcal_adc_prog.c: 249: return (Std_ReturnType)0x01;
  1673                           ;	Return value of _ADC_input_channel_port_configure is never used
  1674  001386  0012               	return	
  1675  001388                     l3724:
  1676                           
  1677                           ;mcal_adc_prog.c: 252: (TRISE |= ((uint8)1 << 0x0));
  1678  001388  8096               	bsf	3990,0,c	;volatile
  1679                           
  1680                           ;mcal_adc_prog.c: 254: break;
  1681                           
  1682                           ;mcal_adc_prog.c: 253: return (Std_ReturnType)0x01;
  1683                           ;	Return value of _ADC_input_channel_port_configure is never used
  1684  00138A  0012               	return	
  1685  00138C                     l3730:
  1686                           
  1687                           ;mcal_adc_prog.c: 256: (TRISE |= ((uint8)1 << 0x1));
  1688  00138C  8296               	bsf	3990,1,c	;volatile
  1689                           
  1690                           ;mcal_adc_prog.c: 258: break;
  1691                           
  1692                           ;mcal_adc_prog.c: 257: return (Std_ReturnType)0x01;
  1693                           ;	Return value of _ADC_input_channel_port_configure is never used
  1694  00138E  0012               	return	
  1695  001390                     l3736:
  1696                           
  1697                           ;mcal_adc_prog.c: 260: (TRISE |= ((uint8)1 << 0x2));
  1698  001390  8496               	bsf	3990,2,c	;volatile
  1699                           
  1700                           ;mcal_adc_prog.c: 262: break;
  1701                           
  1702                           ;mcal_adc_prog.c: 261: return (Std_ReturnType)0x01;
  1703                           ;	Return value of _ADC_input_channel_port_configure is never used
  1704  001392  0012               	return	
  1705  001394                     l3742:
  1706                           
  1707                           ;mcal_adc_prog.c: 264: (TRISB |= ((uint8)1 << 0x2));
  1708  001394  8493               	bsf	3987,2,c	;volatile
  1709                           
  1710                           ;mcal_adc_prog.c: 266: break;
  1711                           
  1712                           ;mcal_adc_prog.c: 265: return (Std_ReturnType)0x01;
  1713                           ;	Return value of _ADC_input_channel_port_configure is never used
  1714  001396  0012               	return	
  1715  001398                     l3748:
  1716                           
  1717                           ;mcal_adc_prog.c: 268: (TRISB |= ((uint8)1 << 0x3));
  1718  001398  8693               	bsf	3987,3,c	;volatile
  1719                           
  1720                           ;mcal_adc_prog.c: 270: break;
  1721                           
  1722                           ;mcal_adc_prog.c: 269: return (Std_ReturnType)0x01;
  1723                           ;	Return value of _ADC_input_channel_port_configure is never used
  1724  00139A  0012               	return	
  1725  00139C                     l3754:
  1726                           
  1727                           ;mcal_adc_prog.c: 272: (TRISB |= ((uint8)1 << 0x1));
  1728  00139C  8293               	bsf	3987,1,c	;volatile
  1729                           
  1730                           ;mcal_adc_prog.c: 274: break;
  1731                           
  1732                           ;mcal_adc_prog.c: 273: return (Std_ReturnType)0x01;
  1733                           ;	Return value of _ADC_input_channel_port_configure is never used
  1734  00139E  0012               	return	
  1735  0013A0                     l3760:
  1736                           
  1737                           ;mcal_adc_prog.c: 276: (TRISB |= ((uint8)1 << 0x4));
  1738  0013A0  8893               	bsf	3987,4,c	;volatile
  1739                           
  1740                           ;mcal_adc_prog.c: 278: break;
  1741                           
  1742                           ;mcal_adc_prog.c: 277: return (Std_ReturnType)0x01;
  1743                           ;	Return value of _ADC_input_channel_port_configure is never used
  1744  0013A2  0012               	return	
  1745  0013A4                     l3766:
  1746                           
  1747                           ;mcal_adc_prog.c: 280: (TRISB |= ((uint8)1 << 0x0));
  1748  0013A4  8093               	bsf	3987,0,c	;volatile
  1749                           
  1750                           ;mcal_adc_prog.c: 285: }
  1751                           
  1752                           ;mcal_adc_prog.c: 284: return (Std_ReturnType)0x00;
  1753                           ;	Return value of _ADC_input_channel_port_configure is never used
  1754                           
  1755                           ;mcal_adc_prog.c: 283: default:
  1756                           
  1757                           ;mcal_adc_prog.c: 282: break;
  1758                           
  1759                           ;mcal_adc_prog.c: 281: return (Std_ReturnType)0x01;
  1760                           ;	Return value of _ADC_input_channel_port_configure is never used
  1761  0013A6  0012               	return	
  1762  0013A8                     l3774:
  1763  0013A8  0100               	movlb	0	; () banked
  1764  0013AA  519A               	movf	ADC_input_channel_port_configure@channel& (0+255),w,b
  1765                           
  1766                           ; Switch size 1, requested type "space"
  1767                           ; Number of cases is 13, Range of values is 0 to 12
  1768                           ; switch strategies available:
  1769                           ; Name         Instructions Cycles
  1770                           ; simple_byte           40    21 (average)
  1771                           ;	Chosen strategy is simple_byte
  1772  0013AC  0A00               	xorlw	0	; case 0
  1773  0013AE  B4D8               	btfsc	status,2,c
  1774  0013B0  D7E1               	goto	l3694
  1775  0013B2  0A01               	xorlw	1	; case 1
  1776  0013B4  B4D8               	btfsc	status,2,c
  1777  0013B6  D7E0               	goto	l3700
  1778  0013B8  0A03               	xorlw	3	; case 2
  1779  0013BA  B4D8               	btfsc	status,2,c
  1780  0013BC  D7DF               	goto	l3706
  1781  0013BE  0A01               	xorlw	1	; case 3
  1782  0013C0  B4D8               	btfsc	status,2,c
  1783  0013C2  D7DE               	goto	l3712
  1784  0013C4  0A07               	xorlw	7	; case 4
  1785  0013C6  B4D8               	btfsc	status,2,c
  1786  0013C8  D7DD               	goto	l3718
  1787  0013CA  0A01               	xorlw	1	; case 5
  1788  0013CC  B4D8               	btfsc	status,2,c
  1789  0013CE  D7DC               	goto	l3724
  1790  0013D0  0A03               	xorlw	3	; case 6
  1791  0013D2  B4D8               	btfsc	status,2,c
  1792  0013D4  D7DB               	goto	l3730
  1793  0013D6  0A01               	xorlw	1	; case 7
  1794  0013D8  B4D8               	btfsc	status,2,c
  1795  0013DA  D7DA               	goto	l3736
  1796  0013DC  0A0F               	xorlw	15	; case 8
  1797  0013DE  B4D8               	btfsc	status,2,c
  1798  0013E0  D7D9               	goto	l3742
  1799  0013E2  0A01               	xorlw	1	; case 9
  1800  0013E4  B4D8               	btfsc	status,2,c
  1801  0013E6  D7D8               	goto	l3748
  1802  0013E8  0A03               	xorlw	3	; case 10
  1803  0013EA  B4D8               	btfsc	status,2,c
  1804  0013EC  D7D7               	goto	l3754
  1805  0013EE  0A01               	xorlw	1	; case 11
  1806  0013F0  B4D8               	btfsc	status,2,c
  1807  0013F2  D7D6               	goto	l3760
  1808  0013F4  0A07               	xorlw	7	; case 12
  1809  0013F6  A4D8               	btfss	status,2,c
  1810  0013F8  0012               	return	
  1811  0013FA  D7D4               	goto	l3766
  1812  0013FC                     __end_of_ADC_input_channel_port_configure:
  1813                           	opt stack 0
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           prodh	equ	0xFF4
  1819                           prodl	equ	0xFF3
  1820                           intcon	equ	0xFF2
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           postdec1	equ	0xFE5
  1824                           fsr1l	equ	0xFE1
  1825                           indf2	equ	0xFDF
  1826                           postinc2	equ	0xFDE
  1827                           postdec2	equ	0xFDD
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832 ;; *************** function _InterruptManager *****************
  1833 ;; Defined at:
  1834 ;;		line 32 in file "MCAL_Layer/Interrupt_Driver/mcal_iterrupt_mangaer.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;		None
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;		None
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      void 
  1841 ;; Registers used:
  1842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1850 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;Total ram usage:       14 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    3
  1855 ;; This function calls:
  1856 ;;		_ADC_ISR
  1857 ;;		_INT0_ISR
  1858 ;;		_INT1_ISR
  1859 ;;		_INT2_ISR
  1860 ;;		_RB4_ISR
  1861 ;;		_RB5_ISR
  1862 ;;		_RB6_ISR
  1863 ;;		_RB7_ISR
  1864 ;; This function is called by:
  1865 ;;		Interrupt level 2
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	intcode
  1870  000008                     __pintcode:
  1871                           	opt stack 0
  1872  000008                     _InterruptManager:
  1873                           	opt stack 24
  1874                           
  1875                           ;incstack = 0
  1876  000008  826E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1877  00000A  ED09  F008         	call	int_func,f	;refresh shadow registers
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           prodh	equ	0xFF4
  1883                           prodl	equ	0xFF3
  1884                           intcon	equ	0xFF2
  1885                           postinc0	equ	0xFEE
  1886                           wreg	equ	0xFE8
  1887                           postdec1	equ	0xFE5
  1888                           fsr1l	equ	0xFE1
  1889                           indf2	equ	0xFDF
  1890                           postinc2	equ	0xFDE
  1891                           postdec2	equ	0xFDD
  1892                           fsr2h	equ	0xFDA
  1893                           fsr2l	equ	0xFD9
  1894                           status	equ	0xFD8
  1895                           
  1896                           	psect	intcode_body
  1897  001012                     __pintcode_body:
  1898                           	opt stack 24
  1899  001012                     int_func:
  1900                           	opt stack 24
  1901  001012  0006               	pop		; remove dummy address from shadow register refresh
  1902  001014  CFFA F060          	movff	pclath,??_InterruptManager
  1903  001018  CFFB F061          	movff	pclatu,??_InterruptManager+1
  1904  00101C  CFE9 F062          	movff	fsr0l,??_InterruptManager+2
  1905  001020  CFEA F063          	movff	fsr0h,??_InterruptManager+3
  1906  001024  CFE1 F064          	movff	fsr1l,??_InterruptManager+4
  1907  001028  CFE2 F065          	movff	fsr1h,??_InterruptManager+5
  1908  00102C  CFD9 F066          	movff	fsr2l,??_InterruptManager+6
  1909  001030  CFDA F067          	movff	fsr2h,??_InterruptManager+7
  1910  001034  CFF3 F068          	movff	prodl,??_InterruptManager+8
  1911  001038  CFF4 F069          	movff	prodh,??_InterruptManager+9
  1912  00103C  CFF6 F06A          	movff	tblptrl,??_InterruptManager+10
  1913  001040  CFF7 F06B          	movff	tblptrh,??_InterruptManager+11
  1914  001044  CFF8 F06C          	movff	tblptru,??_InterruptManager+12
  1915  001048  CFF5 F06D          	movff	tablat,??_InterruptManager+13
  1916                           
  1917                           ;mcal_iterrupt_mangaer.c: 33: if (INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1) {
  1918  00104C  B8F2               	btfsc	intcon,4,c	;volatile
  1919  00104E  A2F2               	btfss	intcon,1,c	;volatile
  1920  001050  D002               	goto	i2l3560
  1921                           
  1922                           ;mcal_iterrupt_mangaer.c: 34: INT0_ISR();
  1923  001052  EC7A  F00B         	call	_INT0_ISR	;wreg free
  1924  001056                     i2l3560:
  1925                           
  1926                           ;mcal_iterrupt_mangaer.c: 35: }
  1927                           ;mcal_iterrupt_mangaer.c: 36: if (INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1) {
  1928  001056  B6F0               	btfsc	intcon3,3,c	;volatile
  1929  001058  A0F0               	btfss	intcon3,0,c	;volatile
  1930  00105A  D002               	goto	i2l3566
  1931                           
  1932                           ;mcal_iterrupt_mangaer.c: 37: INT1_ISR();
  1933  00105C  EC78  F00B         	call	_INT1_ISR	;wreg free
  1934  001060                     i2l3566:
  1935                           
  1936                           ;mcal_iterrupt_mangaer.c: 38: }
  1937                           ;mcal_iterrupt_mangaer.c: 39: if (INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1) {
  1938  001060  B8F0               	btfsc	intcon3,4,c	;volatile
  1939  001062  A2F0               	btfss	intcon3,1,c	;volatile
  1940  001064  D002               	goto	i2l3572
  1941                           
  1942                           ;mcal_iterrupt_mangaer.c: 40: INT2_ISR();
  1943  001066  EC76  F00B         	call	_INT2_ISR	;wreg free
  1944  00106A                     i2l3572:
  1945                           
  1946                           ;mcal_iterrupt_mangaer.c: 41: }
  1947                           ;mcal_iterrupt_mangaer.c: 43: if (INTCONbits.RBIE==1 && INTCONbits.RBIF==1 && PORTBbits.
      +                          RB4==HIGH && RB4_Flag==1){
  1948  00106A  B6F2               	btfsc	intcon,3,c	;volatile
  1949  00106C  A0F2               	btfss	intcon,0,c	;volatile
  1950  00106E  D00E               	goto	i2l3584
  1951  001070  A881               	btfss	3969,4,c	;volatile
  1952  001072  D00C               	goto	i2l3584
  1953  001074  0418               	decf	_RB4_Flag,w,c
  1954  001076  A4D8               	btfss	status,2,c
  1955  001078  D009               	goto	i2l3584
  1956                           
  1957                           ;mcal_iterrupt_mangaer.c: 44: RB4_Flag=0;
  1958  00107A  0E00               	movlw	0
  1959  00107C  6E18               	movwf	_RB4_Flag,c
  1960                           
  1961                           ;mcal_iterrupt_mangaer.c: 45: RB4_ISR(PORTBbits.RB4);
  1962  00107E  A881               	btfss	3969,4,c	;volatile
  1963  001080  D002               	goto	i2u238_40
  1964  001082  0E01               	movlw	1
  1965  001084  D001               	goto	i2u238_46
  1966  001086                     i2u238_40:
  1967  001086  0E00               	movlw	0
  1968  001088                     i2u238_46:
  1969  001088  EC73  F00B         	call	_RB4_ISR
  1970  00108C                     i2l3584:
  1971                           
  1972                           ;mcal_iterrupt_mangaer.c: 46: }
  1973                           ;mcal_iterrupt_mangaer.c: 47: if (INTCONbits.RBIE==1 && INTCONbits.RBIF==1 && PORTBbits.
      +                          RB4==LOW && RB4_Flag==0){
  1974  00108C  B6F2               	btfsc	intcon,3,c	;volatile
  1975  00108E  A0F2               	btfss	intcon,0,c	;volatile
  1976  001090  D00E               	goto	i2l3596
  1977  001092  B881               	btfsc	3969,4,c	;volatile
  1978  001094  D00C               	goto	i2l3596
  1979  001096  5018               	movf	_RB4_Flag,w,c
  1980  001098  A4D8               	btfss	status,2,c
  1981  00109A  D009               	goto	i2l3596
  1982                           
  1983                           ;mcal_iterrupt_mangaer.c: 48: RB4_Flag=1;
  1984  00109C  0E01               	movlw	1
  1985  00109E  6E18               	movwf	_RB4_Flag,c
  1986                           
  1987                           ;mcal_iterrupt_mangaer.c: 49: RB4_ISR(PORTBbits.RB4);
  1988  0010A0  A881               	btfss	3969,4,c	;volatile
  1989  0010A2  D002               	goto	i2u243_40
  1990  0010A4  0E01               	movlw	1
  1991  0010A6  D001               	goto	i2u243_46
  1992  0010A8                     i2u243_40:
  1993  0010A8  0E00               	movlw	0
  1994  0010AA                     i2u243_46:
  1995  0010AA  EC73  F00B         	call	_RB4_ISR
  1996  0010AE                     i2l3596:
  1997                           
  1998                           ;mcal_iterrupt_mangaer.c: 50: }
  1999                           ;mcal_iterrupt_mangaer.c: 54: if (INTCONbits.RBIE==1 && INTCONbits.RBIF==1 && PORTBbits.
      +                          RB5==HIGH && RB5_Flag==1){
  2000  0010AE  B6F2               	btfsc	intcon,3,c	;volatile
  2001  0010B0  A0F2               	btfss	intcon,0,c	;volatile
  2002  0010B2  D00E               	goto	i2l3608
  2003  0010B4  AA81               	btfss	3969,5,c	;volatile
  2004  0010B6  D00C               	goto	i2l3608
  2005  0010B8  0417               	decf	_RB5_Flag,w,c
  2006  0010BA  A4D8               	btfss	status,2,c
  2007  0010BC  D009               	goto	i2l3608
  2008                           
  2009                           ;mcal_iterrupt_mangaer.c: 55: RB5_Flag=0;
  2010  0010BE  0E00               	movlw	0
  2011  0010C0  6E17               	movwf	_RB5_Flag,c
  2012                           
  2013                           ;mcal_iterrupt_mangaer.c: 56: RB5_ISR(PORTBbits.RB5);
  2014  0010C2  AA81               	btfss	3969,5,c	;volatile
  2015  0010C4  D002               	goto	i2u248_40
  2016  0010C6  0E01               	movlw	1
  2017  0010C8  D001               	goto	i2u248_46
  2018  0010CA                     i2u248_40:
  2019  0010CA  0E00               	movlw	0
  2020  0010CC                     i2u248_46:
  2021  0010CC  EC70  F00B         	call	_RB5_ISR
  2022  0010D0                     i2l3608:
  2023                           
  2024                           ;mcal_iterrupt_mangaer.c: 57: }
  2025                           ;mcal_iterrupt_mangaer.c: 58: if (INTCONbits.RBIE==1 && INTCONbits.RBIF==1 && PORTBbits.
      +                          RB5==LOW && RB5_Flag==0){
  2026  0010D0  B6F2               	btfsc	intcon,3,c	;volatile
  2027  0010D2  A0F2               	btfss	intcon,0,c	;volatile
  2028  0010D4  D00E               	goto	i2l3620
  2029  0010D6  BA81               	btfsc	3969,5,c	;volatile
  2030  0010D8  D00C               	goto	i2l3620
  2031  0010DA  5017               	movf	_RB5_Flag,w,c
  2032  0010DC  A4D8               	btfss	status,2,c
  2033  0010DE  D009               	goto	i2l3620
  2034                           
  2035                           ;mcal_iterrupt_mangaer.c: 59: RB5_Flag=1;
  2036  0010E0  0E01               	movlw	1
  2037  0010E2  6E17               	movwf	_RB5_Flag,c
  2038                           
  2039                           ;mcal_iterrupt_mangaer.c: 60: RB5_ISR(PORTBbits.RB5);
  2040  0010E4  AA81               	btfss	3969,5,c	;volatile
  2041  0010E6  D002               	goto	i2u253_40
  2042  0010E8  0E01               	movlw	1
  2043  0010EA  D001               	goto	i2u253_46
  2044  0010EC                     i2u253_40:
  2045  0010EC  0E00               	movlw	0
  2046  0010EE                     i2u253_46:
  2047  0010EE  EC70  F00B         	call	_RB5_ISR
  2048  0010F2                     i2l3620:
  2049                           
  2050                           ;mcal_iterrupt_mangaer.c: 61: }
  2051                           ;mcal_iterrupt_mangaer.c: 65: if (INTCONbits.RBIE==1 && INTCONbits.RBIF==1 && PORTBbits.
      +                          RB6==HIGH && RB6_Flag==1){
  2052  0010F2  B6F2               	btfsc	intcon,3,c	;volatile
  2053  0010F4  A0F2               	btfss	intcon,0,c	;volatile
  2054  0010F6  D00E               	goto	i2l3632
  2055  0010F8  AC81               	btfss	3969,6,c	;volatile
  2056  0010FA  D00C               	goto	i2l3632
  2057  0010FC  0416               	decf	_RB6_Flag,w,c
  2058  0010FE  A4D8               	btfss	status,2,c
  2059  001100  D009               	goto	i2l3632
  2060                           
  2061                           ;mcal_iterrupt_mangaer.c: 66: RB6_Flag=0;
  2062  001102  0E00               	movlw	0
  2063  001104  6E16               	movwf	_RB6_Flag,c
  2064                           
  2065                           ;mcal_iterrupt_mangaer.c: 67: RB6_ISR(PORTBbits.RB6);
  2066  001106  AC81               	btfss	3969,6,c	;volatile
  2067  001108  D002               	goto	i2u258_40
  2068  00110A  0E01               	movlw	1
  2069  00110C  D001               	goto	i2u258_46
  2070  00110E                     i2u258_40:
  2071  00110E  0E00               	movlw	0
  2072  001110                     i2u258_46:
  2073  001110  EC6D  F00B         	call	_RB6_ISR
  2074  001114                     i2l3632:
  2075                           
  2076                           ;mcal_iterrupt_mangaer.c: 68: }
  2077                           ;mcal_iterrupt_mangaer.c: 69: if (INTCONbits.RBIE==1 && INTCONbits.RBIF==1 && PORTBbits.
      +                          RB6==LOW && RB6_Flag==0){
  2078  001114  B6F2               	btfsc	intcon,3,c	;volatile
  2079  001116  A0F2               	btfss	intcon,0,c	;volatile
  2080  001118  D00E               	goto	i2l3644
  2081  00111A  BC81               	btfsc	3969,6,c	;volatile
  2082  00111C  D00C               	goto	i2l3644
  2083  00111E  5016               	movf	_RB6_Flag,w,c
  2084  001120  A4D8               	btfss	status,2,c
  2085  001122  D009               	goto	i2l3644
  2086                           
  2087                           ;mcal_iterrupt_mangaer.c: 70: RB6_Flag=1;
  2088  001124  0E01               	movlw	1
  2089  001126  6E16               	movwf	_RB6_Flag,c
  2090                           
  2091                           ;mcal_iterrupt_mangaer.c: 71: RB6_ISR(PORTBbits.RB6);
  2092  001128  AC81               	btfss	3969,6,c	;volatile
  2093  00112A  D002               	goto	i2u263_40
  2094  00112C  0E01               	movlw	1
  2095  00112E  D001               	goto	i2u263_46
  2096  001130                     i2u263_40:
  2097  001130  0E00               	movlw	0
  2098  001132                     i2u263_46:
  2099  001132  EC6D  F00B         	call	_RB6_ISR
  2100  001136                     i2l3644:
  2101                           
  2102                           ;mcal_iterrupt_mangaer.c: 72: }
  2103                           ;mcal_iterrupt_mangaer.c: 76: if (INTCONbits.RBIE==1 && INTCONbits.RBIF==1 && PORTBbits.
      +                          RB7==HIGH && RB7_Flag==1){
  2104  001136  B6F2               	btfsc	intcon,3,c	;volatile
  2105  001138  A0F2               	btfss	intcon,0,c	;volatile
  2106  00113A  D00E               	goto	i2l3656
  2107  00113C  AE81               	btfss	3969,7,c	;volatile
  2108  00113E  D00C               	goto	i2l3656
  2109  001140  0415               	decf	_RB7_Flag,w,c
  2110  001142  A4D8               	btfss	status,2,c
  2111  001144  D009               	goto	i2l3656
  2112                           
  2113                           ;mcal_iterrupt_mangaer.c: 77: RB7_Flag=0;
  2114  001146  0E00               	movlw	0
  2115  001148  6E15               	movwf	_RB7_Flag,c
  2116                           
  2117                           ;mcal_iterrupt_mangaer.c: 78: RB7_ISR(PORTBbits.RB7);
  2118  00114A  AE81               	btfss	3969,7,c	;volatile
  2119  00114C  D002               	goto	i2u268_40
  2120  00114E  0E01               	movlw	1
  2121  001150  D001               	goto	i2u268_46
  2122  001152                     i2u268_40:
  2123  001152  0E00               	movlw	0
  2124  001154                     i2u268_46:
  2125  001154  EC6A  F00B         	call	_RB7_ISR
  2126  001158                     i2l3656:
  2127                           
  2128                           ;mcal_iterrupt_mangaer.c: 79: }
  2129                           ;mcal_iterrupt_mangaer.c: 80: if (INTCONbits.RBIE==1 && INTCONbits.RBIF==1 && PORTBbits.
      +                          RB7==LOW && RB7_Flag==0){
  2130  001158  B6F2               	btfsc	intcon,3,c	;volatile
  2131  00115A  A0F2               	btfss	intcon,0,c	;volatile
  2132  00115C  D00E               	goto	i2l3668
  2133  00115E  BE81               	btfsc	3969,7,c	;volatile
  2134  001160  D00C               	goto	i2l3668
  2135  001162  5015               	movf	_RB7_Flag,w,c
  2136  001164  A4D8               	btfss	status,2,c
  2137  001166  D009               	goto	i2l3668
  2138                           
  2139                           ;mcal_iterrupt_mangaer.c: 81: RB7_Flag=1;
  2140  001168  0E01               	movlw	1
  2141  00116A  6E15               	movwf	_RB7_Flag,c
  2142                           
  2143                           ;mcal_iterrupt_mangaer.c: 82: RB7_ISR(PORTBbits.RB7);
  2144  00116C  AE81               	btfss	3969,7,c	;volatile
  2145  00116E  D002               	goto	i2u273_40
  2146  001170  0E01               	movlw	1
  2147  001172  D001               	goto	i2u273_46
  2148  001174                     i2u273_40:
  2149  001174  0E00               	movlw	0
  2150  001176                     i2u273_46:
  2151  001176  EC6A  F00B         	call	_RB7_ISR
  2152  00117A                     i2l3668:
  2153                           
  2154                           ;mcal_iterrupt_mangaer.c: 83: }
  2155                           ;mcal_iterrupt_mangaer.c: 85: if((1 == PIE1bits.ADIE) && (1 == PIR1bits.ADIF)){
  2156  00117A  BC9D               	btfsc	3997,6,c	;volatile
  2157  00117C  AC9E               	btfss	3998,6,c	;volatile
  2158  00117E  D002               	goto	i2l1050
  2159                           
  2160                           ;mcal_iterrupt_mangaer.c: 86: ADC_ISR();
  2161  001180  EC34  F00B         	call	_ADC_ISR	;wreg free
  2162  001184                     i2l1050:
  2163  001184  C06D  FFF5         	movff	??_InterruptManager+13,tablat
  2164  001188  C06C  FFF8         	movff	??_InterruptManager+12,tblptru
  2165  00118C  C06B  FFF7         	movff	??_InterruptManager+11,tblptrh
  2166  001190  C06A  FFF6         	movff	??_InterruptManager+10,tblptrl
  2167  001194  C069  FFF4         	movff	??_InterruptManager+9,prodh
  2168  001198  C068  FFF3         	movff	??_InterruptManager+8,prodl
  2169  00119C  C067  FFDA         	movff	??_InterruptManager+7,fsr2h
  2170  0011A0  C066  FFD9         	movff	??_InterruptManager+6,fsr2l
  2171  0011A4  C065  FFE2         	movff	??_InterruptManager+5,fsr1h
  2172  0011A8  C064  FFE1         	movff	??_InterruptManager+4,fsr1l
  2173  0011AC  C063  FFEA         	movff	??_InterruptManager+3,fsr0h
  2174  0011B0  C062  FFE9         	movff	??_InterruptManager+2,fsr0l
  2175  0011B4  C061  FFFB         	movff	??_InterruptManager+1,pclatu
  2176  0011B8  C060  FFFA         	movff	??_InterruptManager,pclath
  2177  0011BC  926E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2178  0011BE  0011               	retfie		f
  2179  0011C0                     __end_of_InterruptManager:
  2180                           	opt stack 0
  2181                           pclatu	equ	0xFFB
  2182                           pclath	equ	0xFFA
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           prodh	equ	0xFF4
  2188                           prodl	equ	0xFF3
  2189                           intcon	equ	0xFF2
  2190                           intcon3	equ	0xFF0
  2191                           postinc0	equ	0xFEE
  2192                           fsr0h	equ	0xFEA
  2193                           fsr0l	equ	0xFE9
  2194                           wreg	equ	0xFE8
  2195                           postdec1	equ	0xFE5
  2196                           fsr1h	equ	0xFE2
  2197                           fsr1l	equ	0xFE1
  2198                           indf2	equ	0xFDF
  2199                           postinc2	equ	0xFDE
  2200                           postdec2	equ	0xFDD
  2201                           fsr2h	equ	0xFDA
  2202                           fsr2l	equ	0xFD9
  2203                           status	equ	0xFD8
  2204                           
  2205 ;; *************** function _RB7_ISR *****************
  2206 ;; Defined at:
  2207 ;;		line 681 in file "MCAL_Layer/Interrupt_Driver/mcal_external_interrupt.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;  source          1    wreg     unsigned char 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  source          1    0[COMRAM] unsigned char 
  2212 ;; Return value:  Size  Location     Type
  2213 ;;                  1    wreg      void 
  2214 ;; Registers used:
  2215 ;;		wreg, status,2, status,0
  2216 ;; Tracked objects:
  2217 ;;		On entry : 0/0
  2218 ;;		On exit  : 0/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;Total ram usage:        1 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_InterruptManager
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           	psect	text10
  2235  0016D4                     __ptext10:
  2236                           	opt stack 0
  2237  0016D4                     _RB7_ISR:
  2238                           	opt stack 26
  2239                           
  2240                           ;incstack = 0
  2241                           ;RB7_ISR@source stored from wreg
  2242  0016D4  6E58               	movwf	RB7_ISR@source,c
  2243                           
  2244                           ;mcal_external_interrupt.c: 682: (INTCONbits.RBIF = 0);
  2245  0016D6  90F2               	bcf	intcon,0,c	;volatile
  2246  0016D8  0012               	return	
  2247  0016DA                     __end_of_RB7_ISR:
  2248                           	opt stack 0
  2249                           pclatu	equ	0xFFB
  2250                           pclath	equ	0xFFA
  2251                           tblptru	equ	0xFF8
  2252                           tblptrh	equ	0xFF7
  2253                           tblptrl	equ	0xFF6
  2254                           tablat	equ	0xFF5
  2255                           prodh	equ	0xFF4
  2256                           prodl	equ	0xFF3
  2257                           intcon	equ	0xFF2
  2258                           intcon3	equ	0xFF0
  2259                           postinc0	equ	0xFEE
  2260                           fsr0h	equ	0xFEA
  2261                           fsr0l	equ	0xFE9
  2262                           wreg	equ	0xFE8
  2263                           postdec1	equ	0xFE5
  2264                           fsr1h	equ	0xFE2
  2265                           fsr1l	equ	0xFE1
  2266                           indf2	equ	0xFDF
  2267                           postinc2	equ	0xFDE
  2268                           postdec2	equ	0xFDD
  2269                           fsr2h	equ	0xFDA
  2270                           fsr2l	equ	0xFD9
  2271                           status	equ	0xFD8
  2272                           
  2273 ;; *************** function _RB6_ISR *****************
  2274 ;; Defined at:
  2275 ;;		line 668 in file "MCAL_Layer/Interrupt_Driver/mcal_external_interrupt.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  source          1    wreg     unsigned char 
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  source          1    0[COMRAM] unsigned char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, status,2, status,0
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;Total ram usage:        1 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; This function calls:
  2296 ;;		Nothing
  2297 ;; This function is called by:
  2298 ;;		_InterruptManager
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           	psect	text11
  2303  0016DA                     __ptext11:
  2304                           	opt stack 0
  2305  0016DA                     _RB6_ISR:
  2306                           	opt stack 26
  2307                           
  2308                           ;incstack = 0
  2309                           ;RB6_ISR@source stored from wreg
  2310  0016DA  6E58               	movwf	RB6_ISR@source,c
  2311                           
  2312                           ;mcal_external_interrupt.c: 669: (INTCONbits.RBIF = 0);
  2313  0016DC  90F2               	bcf	intcon,0,c	;volatile
  2314  0016DE  0012               	return	
  2315  0016E0                     __end_of_RB6_ISR:
  2316                           	opt stack 0
  2317                           pclatu	equ	0xFFB
  2318                           pclath	equ	0xFFA
  2319                           tblptru	equ	0xFF8
  2320                           tblptrh	equ	0xFF7
  2321                           tblptrl	equ	0xFF6
  2322                           tablat	equ	0xFF5
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           intcon	equ	0xFF2
  2326                           intcon3	equ	0xFF0
  2327                           postinc0	equ	0xFEE
  2328                           fsr0h	equ	0xFEA
  2329                           fsr0l	equ	0xFE9
  2330                           wreg	equ	0xFE8
  2331                           postdec1	equ	0xFE5
  2332                           fsr1h	equ	0xFE2
  2333                           fsr1l	equ	0xFE1
  2334                           indf2	equ	0xFDF
  2335                           postinc2	equ	0xFDE
  2336                           postdec2	equ	0xFDD
  2337                           fsr2h	equ	0xFDA
  2338                           fsr2l	equ	0xFD9
  2339                           status	equ	0xFD8
  2340                           
  2341 ;; *************** function _RB5_ISR *****************
  2342 ;; Defined at:
  2343 ;;		line 655 in file "MCAL_Layer/Interrupt_Driver/mcal_external_interrupt.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  source          1    wreg     unsigned char 
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  source          1    0[COMRAM] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  1    wreg      void 
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, status,0
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2360 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2361 ;;Total ram usage:        1 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; This function calls:
  2364 ;;		Nothing
  2365 ;; This function is called by:
  2366 ;;		_InterruptManager
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text12
  2371  0016E0                     __ptext12:
  2372                           	opt stack 0
  2373  0016E0                     _RB5_ISR:
  2374                           	opt stack 26
  2375                           
  2376                           ;incstack = 0
  2377                           ;RB5_ISR@source stored from wreg
  2378  0016E0  6E58               	movwf	RB5_ISR@source,c
  2379                           
  2380                           ;mcal_external_interrupt.c: 656: (INTCONbits.RBIF = 0);
  2381  0016E2  90F2               	bcf	intcon,0,c	;volatile
  2382  0016E4  0012               	return	
  2383  0016E6                     __end_of_RB5_ISR:
  2384                           	opt stack 0
  2385                           pclatu	equ	0xFFB
  2386                           pclath	equ	0xFFA
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           prodh	equ	0xFF4
  2392                           prodl	equ	0xFF3
  2393                           intcon	equ	0xFF2
  2394                           intcon3	equ	0xFF0
  2395                           postinc0	equ	0xFEE
  2396                           fsr0h	equ	0xFEA
  2397                           fsr0l	equ	0xFE9
  2398                           wreg	equ	0xFE8
  2399                           postdec1	equ	0xFE5
  2400                           fsr1h	equ	0xFE2
  2401                           fsr1l	equ	0xFE1
  2402                           indf2	equ	0xFDF
  2403                           postinc2	equ	0xFDE
  2404                           postdec2	equ	0xFDD
  2405                           fsr2h	equ	0xFDA
  2406                           fsr2l	equ	0xFD9
  2407                           status	equ	0xFD8
  2408                           
  2409 ;; *************** function _RB4_ISR *****************
  2410 ;; Defined at:
  2411 ;;		line 642 in file "MCAL_Layer/Interrupt_Driver/mcal_external_interrupt.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  source          1    wreg     unsigned char 
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  source          1    0[COMRAM] unsigned char 
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  1    wreg      void 
  2418 ;; Registers used:
  2419 ;;		wreg, status,2, status,0
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2429 ;;Total ram usage:        1 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_InterruptManager
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text13
  2439  0016E6                     __ptext13:
  2440                           	opt stack 0
  2441  0016E6                     _RB4_ISR:
  2442                           	opt stack 26
  2443                           
  2444                           ;incstack = 0
  2445                           ;RB4_ISR@source stored from wreg
  2446  0016E6  6E58               	movwf	RB4_ISR@source,c
  2447                           
  2448                           ;mcal_external_interrupt.c: 643: (INTCONbits.RBIF = 0);
  2449  0016E8  90F2               	bcf	intcon,0,c	;volatile
  2450  0016EA  0012               	return	
  2451  0016EC                     __end_of_RB4_ISR:
  2452                           	opt stack 0
  2453                           pclatu	equ	0xFFB
  2454                           pclath	equ	0xFFA
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           prodh	equ	0xFF4
  2460                           prodl	equ	0xFF3
  2461                           intcon	equ	0xFF2
  2462                           intcon3	equ	0xFF0
  2463                           postinc0	equ	0xFEE
  2464                           fsr0h	equ	0xFEA
  2465                           fsr0l	equ	0xFE9
  2466                           wreg	equ	0xFE8
  2467                           postdec1	equ	0xFE5
  2468                           fsr1h	equ	0xFE2
  2469                           fsr1l	equ	0xFE1
  2470                           indf2	equ	0xFDF
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _INT2_ISR *****************
  2478 ;; Defined at:
  2479 ;;		line 107 in file "MCAL_Layer/Interrupt_Driver/mcal_external_interrupt.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;		None
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;		None
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;Total ram usage:        0 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; This function calls:
  2500 ;;		Nothing
  2501 ;; This function is called by:
  2502 ;;		_InterruptManager
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text14
  2507  0016EC                     __ptext14:
  2508                           	opt stack 0
  2509  0016EC                     _INT2_ISR:
  2510                           	opt stack 26
  2511                           
  2512                           ;mcal_external_interrupt.c: 109: (INTCON3bits.INT2IF = 0);
  2513                           
  2514                           ;incstack = 0
  2515  0016EC  92F0               	bcf	intcon3,1,c	;volatile
  2516                           
  2517                           ;mcal_external_interrupt.c: 114: } else {
  2518  0016EE  0012               	return	
  2519  0016F0                     __end_of_INT2_ISR:
  2520                           	opt stack 0
  2521                           pclatu	equ	0xFFB
  2522                           pclath	equ	0xFFA
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           intcon	equ	0xFF2
  2530                           intcon3	equ	0xFF0
  2531                           postinc0	equ	0xFEE
  2532                           fsr0h	equ	0xFEA
  2533                           fsr0l	equ	0xFE9
  2534                           wreg	equ	0xFE8
  2535                           postdec1	equ	0xFE5
  2536                           fsr1h	equ	0xFE2
  2537                           fsr1l	equ	0xFE1
  2538                           indf2	equ	0xFDF
  2539                           postinc2	equ	0xFDE
  2540                           postdec2	equ	0xFDD
  2541                           fsr2h	equ	0xFDA
  2542                           fsr2l	equ	0xFD9
  2543                           status	equ	0xFD8
  2544                           
  2545 ;; *************** function _INT1_ISR *****************
  2546 ;; Defined at:
  2547 ;;		line 95 in file "MCAL_Layer/Interrupt_Driver/mcal_external_interrupt.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;		None
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;		None
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  1    wreg      void 
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;Total ram usage:        0 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_InterruptManager
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text15
  2575  0016F0                     __ptext15:
  2576                           	opt stack 0
  2577  0016F0                     _INT1_ISR:
  2578                           	opt stack 26
  2579                           
  2580                           ;mcal_external_interrupt.c: 97: (INTCON3bits.INT1IF = 0);
  2581                           
  2582                           ;incstack = 0
  2583  0016F0  90F0               	bcf	intcon3,0,c	;volatile
  2584                           
  2585                           ;mcal_external_interrupt.c: 102: } else {
  2586  0016F2  0012               	return	
  2587  0016F4                     __end_of_INT1_ISR:
  2588                           	opt stack 0
  2589                           pclatu	equ	0xFFB
  2590                           pclath	equ	0xFFA
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           tblptrl	equ	0xFF6
  2594                           tablat	equ	0xFF5
  2595                           prodh	equ	0xFF4
  2596                           prodl	equ	0xFF3
  2597                           intcon	equ	0xFF2
  2598                           intcon3	equ	0xFF0
  2599                           postinc0	equ	0xFEE
  2600                           fsr0h	equ	0xFEA
  2601                           fsr0l	equ	0xFE9
  2602                           wreg	equ	0xFE8
  2603                           postdec1	equ	0xFE5
  2604                           fsr1h	equ	0xFE2
  2605                           fsr1l	equ	0xFE1
  2606                           indf2	equ	0xFDF
  2607                           postinc2	equ	0xFDE
  2608                           postdec2	equ	0xFDD
  2609                           fsr2h	equ	0xFDA
  2610                           fsr2l	equ	0xFD9
  2611                           status	equ	0xFD8
  2612                           
  2613 ;; *************** function _INT0_ISR *****************
  2614 ;; Defined at:
  2615 ;;		line 80 in file "MCAL_Layer/Interrupt_Driver/mcal_external_interrupt.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, status,2, status,0
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;Total ram usage:        0 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; This function calls:
  2636 ;;		Nothing
  2637 ;; This function is called by:
  2638 ;;		_InterruptManager
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text16
  2643  0016F4                     __ptext16:
  2644                           	opt stack 0
  2645  0016F4                     _INT0_ISR:
  2646                           	opt stack 26
  2647                           
  2648                           ;mcal_external_interrupt.c: 82: (INTCONbits.INT0IF = 0);
  2649                           
  2650                           ;incstack = 0
  2651  0016F4  92F2               	bcf	intcon,1,c	;volatile
  2652                           
  2653                           ;mcal_external_interrupt.c: 87: } else {
  2654  0016F6  0012               	return	
  2655  0016F8                     __end_of_INT0_ISR:
  2656                           	opt stack 0
  2657                           pclatu	equ	0xFFB
  2658                           pclath	equ	0xFFA
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           prodh	equ	0xFF4
  2664                           prodl	equ	0xFF3
  2665                           intcon	equ	0xFF2
  2666                           intcon3	equ	0xFF0
  2667                           postinc0	equ	0xFEE
  2668                           fsr0h	equ	0xFEA
  2669                           fsr0l	equ	0xFE9
  2670                           wreg	equ	0xFE8
  2671                           postdec1	equ	0xFE5
  2672                           fsr1h	equ	0xFE2
  2673                           fsr1l	equ	0xFE1
  2674                           indf2	equ	0xFDF
  2675                           postinc2	equ	0xFDE
  2676                           postdec2	equ	0xFDD
  2677                           fsr2h	equ	0xFDA
  2678                           fsr2l	equ	0xFD9
  2679                           status	equ	0xFD8
  2680                           
  2681 ;; *************** function _ADC_ISR *****************
  2682 ;; Defined at:
  2683 ;;		line 287 in file "MCAL_Layer/ADC_Driver/mcal_adc_prog.c"
  2684 ;; Parameters:    Size  Location     Type
  2685 ;;		None
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;		None
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      void 
  2690 ;; Registers used:
  2691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;Total ram usage:        0 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    2
  2704 ;; This function calls:
  2705 ;;		Absolute function
  2706 ;;		_ADC_DefaultInterruptHandeler
  2707 ;; This function is called by:
  2708 ;;		_InterruptManager
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text17
  2713  001668                     __ptext17:
  2714                           	opt stack 0
  2715  001668                     _ADC_ISR:
  2716                           	opt stack 24
  2717                           
  2718                           ;mcal_adc_prog.c: 288: (PIR1bits.ADIF=0);
  2719                           
  2720                           ;incstack = 0
  2721  001668  9C9E               	bcf	3998,6,c	;volatile
  2722                           
  2723                           ;mcal_adc_prog.c: 289: if(ADC_InterruptHandeler){
  2724  00166A  5036               	movf	_ADC_InterruptHandeler,w,c
  2725  00166C  1037               	iorwf	_ADC_InterruptHandeler+1,w,c
  2726  00166E  B4D8               	btfsc	status,2,c
  2727  001670  0012               	return	
  2728                           
  2729                           ;mcal_adc_prog.c: 290: ADC_InterruptHandeler();
  2730  001672  D801               	call	i2u208_48
  2731  001674  0012               	return	
  2732  001676                     i2u208_48:
  2733  001676  0005               	push	
  2734  001678  6EFA               	movwf	pclath,c
  2735  00167A  5036               	movf	_ADC_InterruptHandeler,w,c
  2736  00167C  6EFD               	movwf	tosl,c
  2737  00167E  5037               	movf	_ADC_InterruptHandeler+1,w,c
  2738  001680  6EFE               	movwf	tosh,c
  2739  001682  6AFF               	clrf	tosu,c
  2740  001684  50FA               	movf	pclath,w,c
  2741  001686  0012               	return		;indir
  2742  001688                     __end_of_ADC_ISR:
  2743                           	opt stack 0
  2744                           tosu	equ	0xFFF
  2745                           tosh	equ	0xFFE
  2746                           tosl	equ	0xFFD
  2747                           pclatu	equ	0xFFB
  2748                           pclath	equ	0xFFA
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           prodh	equ	0xFF4
  2754                           prodl	equ	0xFF3
  2755                           intcon	equ	0xFF2
  2756                           intcon3	equ	0xFF0
  2757                           postinc0	equ	0xFEE
  2758                           fsr0h	equ	0xFEA
  2759                           fsr0l	equ	0xFE9
  2760                           wreg	equ	0xFE8
  2761                           postdec1	equ	0xFE5
  2762                           fsr1h	equ	0xFE2
  2763                           fsr1l	equ	0xFE1
  2764                           indf2	equ	0xFDF
  2765                           postinc2	equ	0xFDE
  2766                           postdec2	equ	0xFDD
  2767                           fsr2h	equ	0xFDA
  2768                           fsr2l	equ	0xFD9
  2769                           status	equ	0xFD8
  2770                           
  2771 ;; *************** function _ADC_DefaultInterruptHandeler *****************
  2772 ;; Defined at:
  2773 ;;		line 20 in file "application.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    1
  2794 ;; This function calls:
  2795 ;;		_ADC_GetConversionResult
  2796 ;; This function is called by:
  2797 ;;		_ADC_ISR
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           	psect	text18
  2802  0016BE                     __ptext18:
  2803                           	opt stack 0
  2804  0016BE                     _ADC_DefaultInterruptHandeler:
  2805                           	opt stack 24
  2806                           
  2807                           ;application.c: 21: ADC_GetConversionResult(&adc_1,&adc_res_1);
  2808                           
  2809                           ;incstack = 0
  2810  0016BE  0E2B               	movlw	low _adc_1
  2811  0016C0  6E58               	movwf	ADC_GetConversionResult@adc_obj,c
  2812  0016C2  0E00               	movlw	high _adc_1
  2813  0016C4  6E59               	movwf	ADC_GetConversionResult@adc_obj+1,c
  2814  0016C6  0E56               	movlw	low _adc_res_1
  2815  0016C8  6E5A               	movwf	ADC_GetConversionResult@convesion_result,c
  2816  0016CA  0E00               	movlw	high _adc_res_1
  2817  0016CC  6E5B               	movwf	ADC_GetConversionResult@convesion_result+1,c
  2818  0016CE  ECFE  F009         	call	_ADC_GetConversionResult	;wreg free
  2819  0016D2  0012               	return		;funcret
  2820  0016D4                     __end_of_ADC_DefaultInterruptHandeler:
  2821                           	opt stack 0
  2822                           tosu	equ	0xFFF
  2823                           tosh	equ	0xFFE
  2824                           tosl	equ	0xFFD
  2825                           pclatu	equ	0xFFB
  2826                           pclath	equ	0xFFA
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           prodh	equ	0xFF4
  2832                           prodl	equ	0xFF3
  2833                           intcon	equ	0xFF2
  2834                           intcon3	equ	0xFF0
  2835                           postinc0	equ	0xFEE
  2836                           fsr0h	equ	0xFEA
  2837                           fsr0l	equ	0xFE9
  2838                           wreg	equ	0xFE8
  2839                           postdec1	equ	0xFE5
  2840                           fsr1h	equ	0xFE2
  2841                           fsr1l	equ	0xFE1
  2842                           indf2	equ	0xFDF
  2843                           postinc2	equ	0xFDE
  2844                           postdec2	equ	0xFDD
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function _ADC_GetConversionResult *****************
  2850 ;; Defined at:
  2851 ;;		line 171 in file "MCAL_Layer/ADC_Driver/mcal_adc_prog.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  adc_obj         2    0[COMRAM] PTR const struct .
  2854 ;;		 -> adc_1(6), 
  2855 ;;  convesion_re    2    2[COMRAM] PTR unsigned short 
  2856 ;;		 -> adc_res_1(2), 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  Local_Status    1    7[COMRAM] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      unsigned char 
  2861 ;; Registers used:
  2862 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2868 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;Total ram usage:        8 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_ADC_DefaultInterruptHandeler
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text19
  2882  0013FC                     __ptext19:
  2883                           	opt stack 0
  2884  0013FC                     _ADC_GetConversionResult:
  2885                           	opt stack 24
  2886                           
  2887                           ;mcal_adc_prog.c: 172: Std_ReturnType Local_Status=(Std_ReturnType)0x00;
  2888                           
  2889                           ;incstack = 0
  2890  0013FC  0E00               	movlw	0
  2891  0013FE  6E5F               	movwf	ADC_GetConversionResult@Local_Status,c
  2892                           
  2893                           ;mcal_adc_prog.c: 173: if(adc_obj==(0) || convesion_result==(0)){
  2894  001400  5058               	movf	ADC_GetConversionResult@adc_obj,w,c
  2895  001402  1059               	iorwf	ADC_GetConversionResult@adc_obj+1,w,c
  2896  001404  B4D8               	btfsc	status,2,c
  2897  001406  D004               	goto	i2l3316
  2898  001408  505A               	movf	ADC_GetConversionResult@convesion_result,w,c
  2899  00140A  105B               	iorwf	ADC_GetConversionResult@convesion_result+1,w,c
  2900  00140C  A4D8               	btfss	status,2,c
  2901  00140E  D003               	goto	i2l3318
  2902  001410                     i2l3316:
  2903                           
  2904                           ;mcal_adc_prog.c: 174: Local_Status=(Std_ReturnType)0x00;
  2905  001410  0E00               	movlw	0
  2906  001412  6E5F               	movwf	ADC_GetConversionResult@Local_Status,c
  2907                           
  2908                           ;mcal_adc_prog.c: 175: }else{
  2909  001414  0012               	return	
  2910  001416                     i2l3318:
  2911                           
  2912                           ;mcal_adc_prog.c: 176: if(0x01U == adc_obj->result_format){
  2913  001416  EE20 F005          	lfsr	2,5
  2914  00141A  5058               	movf	ADC_GetConversionResult@adc_obj,w,c
  2915  00141C  26D9               	addwf	fsr2l,f,c
  2916  00141E  5059               	movf	ADC_GetConversionResult@adc_obj+1,w,c
  2917  001420  22DA               	addwfc	fsr2h,f,c
  2918  001422  B2DF               	btfsc	indf2,1,c
  2919  001424  D01A               	goto	i2l3326
  2920                           
  2921                           ;mcal_adc_prog.c: 179: else if(0x00U == adc_obj->result_format){
  2922                           
  2923                           ;mcal_adc_prog.c: 178: }
  2924                           
  2925                           ;mcal_adc_prog.c: 177: *convesion_result = (adc_result_t)((ADRESH << 8) + ADRESL);
  2926  001426  EE20 F005          	lfsr	2,5
  2927  00142A  5058               	movf	ADC_GetConversionResult@adc_obj,w,c
  2928  00142C  26D9               	addwf	fsr2l,f,c
  2929  00142E  5059               	movf	ADC_GetConversionResult@adc_obj+1,w,c
  2930  001430  22DA               	addwfc	fsr2h,f,c
  2931  001432  B2DF               	btfsc	indf2,1,c
  2932  001434  D012               	goto	i2l3326
  2933                           
  2934                           ;mcal_adc_prog.c: 180: *convesion_result = (adc_result_t)(((ADRESH << 8) + ADRESL) >> 6)
      +                          ;
  2935  001436  50C3               	movf	4035,w,c	;volatile
  2936  001438  CFC4 F05C          	movff	4036,??_ADC_GetConversionResult	;volatile
  2937  00143C  6A5D               	clrf	(??_ADC_GetConversionResult+1)& (0+255),c
  2938  00143E  C05C  F05D         	movff	??_ADC_GetConversionResult,??_ADC_GetConversionResult+1
  2939  001442  6A5C               	clrf	??_ADC_GetConversionResult,c
  2940  001444  265C               	addwf	??_ADC_GetConversionResult,f,c
  2941  001446  0E00               	movlw	0
  2942  001448  225D               	addwfc	??_ADC_GetConversionResult+1,f,c
  2943  00144A  0E06               	movlw	6
  2944  00144C  6E5E               	movwf	(??_ADC_GetConversionResult+2)& (0+255),c
  2945  00144E                     i2u199_45:
  2946  00144E  345D               	rlcf	??_ADC_GetConversionResult+1,w,c
  2947  001450  325D               	rrcf	??_ADC_GetConversionResult+1,f,c
  2948  001452  325C               	rrcf	??_ADC_GetConversionResult,f,c
  2949  001454  2E5E               	decfsz	(??_ADC_GetConversionResult+2)& (0+255),f,c
  2950  001456  D7FB               	goto	i2u199_45
  2951  001458  D00A               	goto	L5
  2952  00145A                     i2l3326:
  2953                           
  2954                           ;mcal_adc_prog.c: 182: else{
  2955                           ;mcal_adc_prog.c: 183: *convesion_result = (adc_result_t)((ADRESH << 8) + ADRESL);
  2956  00145A  50C3               	movf	4035,w,c	;volatile
  2957  00145C  CFC4 F05C          	movff	4036,??_ADC_GetConversionResult	;volatile
  2958  001460  6A5D               	clrf	(??_ADC_GetConversionResult+1)& (0+255),c
  2959  001462  C05C  F05D         	movff	??_ADC_GetConversionResult,??_ADC_GetConversionResult+1
  2960  001466  6A5C               	clrf	??_ADC_GetConversionResult,c
  2961  001468  265C               	addwf	??_ADC_GetConversionResult,f,c
  2962  00146A  0E00               	movlw	0
  2963  00146C  225D               	addwfc	??_ADC_GetConversionResult+1,f,c
  2964  00146E                     L5:
  2965  00146E  C05A  FFD9         	movff	ADC_GetConversionResult@convesion_result,fsr2l
  2966  001472  C05B  FFDA         	movff	ADC_GetConversionResult@convesion_result+1,fsr2h
  2967  001476  C05C  FFDE         	movff	??_ADC_GetConversionResult,postinc2
  2968  00147A  C05D  FFDD         	movff	??_ADC_GetConversionResult+1,postdec2
  2969                           
  2970                           ;mcal_adc_prog.c: 184: }
  2971                           ;mcal_adc_prog.c: 185: Local_Status=(Std_ReturnType)0x01;
  2972  00147E  0E01               	movlw	1
  2973  001480  6E5F               	movwf	ADC_GetConversionResult@Local_Status,c
  2974  001482  0012               	return	
  2975  001484                     __end_of_ADC_GetConversionResult:
  2976                           	opt stack 0
  2977                           tosu	equ	0xFFF
  2978                           tosh	equ	0xFFE
  2979                           tosl	equ	0xFFD
  2980                           pclatu	equ	0xFFB
  2981                           pclath	equ	0xFFA
  2982                           tblptru	equ	0xFF8
  2983                           tblptrh	equ	0xFF7
  2984                           tblptrl	equ	0xFF6
  2985                           tablat	equ	0xFF5
  2986                           prodh	equ	0xFF4
  2987                           prodl	equ	0xFF3
  2988                           intcon	equ	0xFF2
  2989                           intcon3	equ	0xFF0
  2990                           postinc0	equ	0xFEE
  2991                           fsr0h	equ	0xFEA
  2992                           fsr0l	equ	0xFE9
  2993                           wreg	equ	0xFE8
  2994                           postdec1	equ	0xFE5
  2995                           fsr1h	equ	0xFE2
  2996                           fsr1l	equ	0xFE1
  2997                           indf2	equ	0xFDF
  2998                           postinc2	equ	0xFDE
  2999                           postdec2	equ	0xFDD
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           tosu	equ	0xFFF
  3004                           tosh	equ	0xFFE
  3005                           tosl	equ	0xFFD
  3006                           pclatu	equ	0xFFB
  3007                           pclath	equ	0xFFA
  3008                           tblptru	equ	0xFF8
  3009                           tblptrh	equ	0xFF7
  3010                           tblptrl	equ	0xFF6
  3011                           tablat	equ	0xFF5
  3012                           prodh	equ	0xFF4
  3013                           prodl	equ	0xFF3
  3014                           intcon	equ	0xFF2
  3015                           intcon3	equ	0xFF0
  3016                           postinc0	equ	0xFEE
  3017                           fsr0h	equ	0xFEA
  3018                           fsr0l	equ	0xFE9
  3019                           wreg	equ	0xFE8
  3020                           postdec1	equ	0xFE5
  3021                           fsr1h	equ	0xFE2
  3022                           fsr1l	equ	0xFE1
  3023                           indf2	equ	0xFDF
  3024                           postinc2	equ	0xFDE
  3025                           postdec2	equ	0xFDD
  3026                           fsr2h	equ	0xFDA
  3027                           fsr2l	equ	0xFD9
  3028                           status	equ	0xFD8
  3029                           
  3030                           	psect	text20
  3031  000000                     __ptext20:
  3032                           	opt stack 0
  3033                           tosu	equ	0xFFF
  3034                           tosh	equ	0xFFE
  3035                           tosl	equ	0xFFD
  3036                           pclatu	equ	0xFFB
  3037                           pclath	equ	0xFFA
  3038                           tblptru	equ	0xFF8
  3039                           tblptrh	equ	0xFF7
  3040                           tblptrl	equ	0xFF6
  3041                           tablat	equ	0xFF5
  3042                           prodh	equ	0xFF4
  3043                           prodl	equ	0xFF3
  3044                           intcon	equ	0xFF2
  3045                           intcon3	equ	0xFF0
  3046                           postinc0	equ	0xFEE
  3047                           fsr0h	equ	0xFEA
  3048                           fsr0l	equ	0xFE9
  3049                           wreg	equ	0xFE8
  3050                           postdec1	equ	0xFE5
  3051                           fsr1h	equ	0xFE2
  3052                           fsr1l	equ	0xFE1
  3053                           indf2	equ	0xFDF
  3054                           postinc2	equ	0xFDE
  3055                           postdec2	equ	0xFDD
  3056                           fsr2h	equ	0xFDA
  3057                           fsr2l	equ	0xFD9
  3058                           status	equ	0xFD8
  3059                           
  3060                           	psect	rparam
  3061  0000                     tosu	equ	0xFFF
  3062                           tosh	equ	0xFFE
  3063                           tosl	equ	0xFFD
  3064                           pclatu	equ	0xFFB
  3065                           pclath	equ	0xFFA
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           prodh	equ	0xFF4
  3071                           prodl	equ	0xFF3
  3072                           intcon	equ	0xFF2
  3073                           intcon3	equ	0xFF0
  3074                           postinc0	equ	0xFEE
  3075                           fsr0h	equ	0xFEA
  3076                           fsr0l	equ	0xFE9
  3077                           wreg	equ	0xFE8
  3078                           postdec1	equ	0xFE5
  3079                           fsr1h	equ	0xFE2
  3080                           fsr1l	equ	0xFE1
  3081                           indf2	equ	0xFDF
  3082                           postinc2	equ	0xFDE
  3083                           postdec2	equ	0xFDD
  3084                           fsr2h	equ	0xFDA
  3085                           fsr2l	equ	0xFD9
  3086                           status	equ	0xFD8
  3087                           
  3088                           	psect	temp
  3089  00006E                     btemp:
  3090                           	opt stack 0
  3091  00006E                     	ds	1
  3092  0000                     int$flags	set	btemp
  3093                           tosu	equ	0xFFF
  3094                           tosh	equ	0xFFE
  3095                           tosl	equ	0xFFD
  3096                           pclatu	equ	0xFFB
  3097                           pclath	equ	0xFFA
  3098                           tblptru	equ	0xFF8
  3099                           tblptrh	equ	0xFF7
  3100                           tblptrl	equ	0xFF6
  3101                           tablat	equ	0xFF5
  3102                           prodh	equ	0xFF4
  3103                           prodl	equ	0xFF3
  3104                           intcon	equ	0xFF2
  3105                           intcon3	equ	0xFF0
  3106                           postinc0	equ	0xFEE
  3107                           fsr0h	equ	0xFEA
  3108                           fsr0l	equ	0xFE9
  3109                           wreg	equ	0xFE8
  3110                           postdec1	equ	0xFE5
  3111                           fsr1h	equ	0xFE2
  3112                           fsr1l	equ	0xFE1
  3113                           indf2	equ	0xFDF
  3114                           postinc2	equ	0xFDE
  3115                           postdec2	equ	0xFDD
  3116                           fsr2h	equ	0xFDA
  3117                           fsr2l	equ	0xFD9
  3118                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    16
    Data        79
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     22     109
    BANK0           128     10      36
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    ADC_StartConversion_Interrupt@adc_obj	PTR const struct . size(2) Largest target is 6
		 -> adc_1(COMRAM[6]), 

    ADC_GetConversionResult@adc_obj.ADC_InterruptHandeler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandeler(), Absolute function(), 

    ADC_GetConversionResult@convesion_result	PTR unsigned short  size(2) Largest target is 2
		 -> adc_res_1(COMRAM[2]), 

    ADC_GetConversionResult@adc_obj	PTR const struct . size(2) Largest target is 6
		 -> adc_1(COMRAM[6]), 

    ADC_SelectChannel@adc_obj	PTR const struct . size(2) Largest target is 6
		 -> adc_1(COMRAM[6]), 

    ADC_StartConversion@adc_obj	PTR const struct . size(2) Largest target is 6
		 -> adc_1(COMRAM[6]), 

    ADC_Init@adc_obj.ADC_InterruptHandeler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandeler(), Absolute function(), 

    ADC_InterruptHandeler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandeler(), Absolute function(), 

    ADC_Init@adc_obj	PTR const struct . size(2) Largest target is 6
		 -> adc_4(COMRAM[6]), adc_3(COMRAM[6]), adc_2(COMRAM[6]), adc_1(COMRAM[6]), 

    adc_4.ADC_InterruptHandeler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandeler(), Absolute function(), 

    adc_3.ADC_InterruptHandeler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandeler(), Absolute function(), 

    adc_2.ADC_InterruptHandeler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandeler(), Absolute function(), 

    S1549$ADC_InterruptHandeler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandeler(), Absolute function(), 

    adc_1.ADC_InterruptHandeler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandeler(), Absolute function(), 

    RB7_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB7_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB6_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB6_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB5_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB5_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB4_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RB4_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    RBx_SetInterruptHandler@int_obj.EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    RBx_SetInterruptHandler@int_obj.EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    S975$EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Pin_Init@int_obj.EXT_InterruptHandler_LOW	PTR FTN()void  size(2) Largest target is 0

    S975$EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Pin_Init@int_obj.EXT_InterruptHandler_HIGH	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_SetInterruptHandler@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Clear_Flag@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Pin_Init@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Edge_Init@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Disable@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    S831$EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Enable@int_obj.EXT_InterruptHandler	PTR FTN()void  size(2) Largest target is 0

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    led_initizlize@led	PTR const struct . size(2) Largest target is 1
		 -> led5(COMRAM[1]), led4(COMRAM[1]), led3(COMRAM[1]), led2(COMRAM[1]), 
		 -> led1(COMRAM[1]), 

    lat_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATE(SFR[1]), LATD(SFR[1]), LATC(SFR[1]), LATB(SFR[1]), 
		 -> LATA(SFR[1]), 

    port_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTE(SFR[1]), PORTD(SFR[1]), PORTC(SFR[1]), PORTB(SFR[1]), 
		 -> PORTA(SFR[1]), 

    tris_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISE(SFR[1]), TRISD(SFR[1]), TRISC(SFR[1]), TRISB(SFR[1]), 
		 -> TRISA(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptManager in COMRAM

    _ADC_DefaultInterruptHandeler->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    _main->_ADC_StartConversion_Interrupt
    _functionInitialize->_ecu_layer_initialize
    _ecu_layer_initialize->_led_initizlize
    _ADC_Init->_ADC_input_channel_port_configure
    _ADC_StartConversion_Interrupt->_ADC_SelectChannel
    _ADC_SelectChannel->_ADC_input_channel_port_configure

Critical Paths under _InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1953
      _ADC_StartConversion_Interrupt
                 _functionInitialize
 ---------------------------------------------------------------------------------
 (1) _functionInitialize                                   0     0      0    1199
                           _ADC_Init
               _ecu_layer_initialize
 ---------------------------------------------------------------------------------
 (2) _ecu_layer_initialize                                 1     1      0     543
                                              9 BANK0      1     1      0
                     _led_initizlize
 ---------------------------------------------------------------------------------
 (3) _led_initizlize                                       9     7      2     518
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             4     2      2     656
                                              1 BANK0      4     2      2
   _ADC_input_channel_port_configure
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion_Interrupt                        4     1      3     754
                                              6 BANK0      4     1      3
                  _ADC_SelectChannel
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (2) _ADC_StartConversion                                  3     1      2     148
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ADC_SelectChannel                                    5     2      3     309
                                              1 BANK0      5     2      3
   _ADC_input_channel_port_configure
 ---------------------------------------------------------------------------------
 (3) _ADC_input_channel_port_configure                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _InterruptManager                                    14    14      0     411
                                              8 COMRAM    14    14      0
                            _ADC_ISR
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                            _RB4_ISR
                            _RB5_ISR
                            _RB6_ISR
                            _RB7_ISR
 ---------------------------------------------------------------------------------
 (5) _RB7_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB6_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB5_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB4_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _INT2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0     291
                   Absolute function *
       _ADC_DefaultInterruptHandeler *
 ---------------------------------------------------------------------------------
 (6) _ADC_DefaultInterruptHandeler                         0     0      0     291
            _ADC_GetConversionResult
 ---------------------------------------------------------------------------------
 (7) _ADC_GetConversionResult                              8     4      4     291
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_StartConversion_Interrupt
     _ADC_SelectChannel
       _ADC_input_channel_port_configure
     _ADC_StartConversion
   _functionInitialize
     _ADC_Init
       _ADC_input_channel_port_configure
     _ecu_layer_initialize
       _led_initizlize

 _InterruptManager (ROOT)
   _ADC_ISR
     Absolute function(Fake) *
     _ADC_DefaultInterruptHandeler *
       _ADC_GetConversionResult
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR
   _RB4_ISR
   _RB5_ISR
   _RB6_ISR
   _RB7_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A      24       5       28.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     16      6D       1       86.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      91      34        0.0%
DATA                 0      0      91       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Oct 15 12:00:49 2023

                       ??_InterruptManager 0060                             _led_initizlize 12DE  
      ADC_GetConversionResult@Local_Status 005F                                __CFG_BORV$1 000000  
                             __CFG_CP0$OFF 000000                               __CFG_CP1$OFF 000000  
                             __CFG_CP2$OFF 000000                               __CFG_CP3$OFF 000000  
                              __CFG_OSC$HS 000000                               __CFG_CPB$OFF 000000  
                             __CFG_CPD$OFF 000000                  _RB5_InterruptHandler_HIGH 004A  
                          __end_of_ADC_ISR 1688                                        prod 000FF3  
                                      tosl 000FFD                                        wreg 000FE8  
           ?_ADC_StartConversion_Interrupt 00A0                               __CFG_LVP$OFF 000000  
                          __end_of_RB4_ISR 16EC                            __end_of_RB5_ISR 16E6  
                          __end_of_RB6_ISR 16E0                            __end_of_RB7_ISR 16DA  
                             __CFG_WDT$OFF 000000                                       l1122 16A2  
                                     l1209 165A                                       l1241 15A6  
                                     l1197 12D4                                       l3700 1378  
                                     l3712 1380                                       l3730 138C  
                                     l3706 137C                                       l3724 1388  
                                     l3820 128E                                       l3742 1394  
                                     l3718 1384                                       l3760 13A0  
                                     l3736 1390                                       l3824 12A2  
                                     l3754 139C                                       l3826 12BC  
                                     l3748 1398                                       l3684 12F4  
                                     l3766 13A4                                       l3694 1374  
                                     l3774 13A8                                       l3848 15E4  
                                     l3796 11DA                                       _LATA 000F89  
                                     _LATB 000F8A                                       _LATC 000F8B  
                                     _LATD 000F8C                                       _LATE 000F8D  
                                     u2774 1318                                       u2775 1312  
                 _RB4_InterruptHandler_LOW 0044                                       _led1 0035  
                                     _led2 0034                                       _led3 0033  
                                     _led4 0032                                       _led5 0031  
                                     _flag 0054                                       _main 1688  
                 _RB7_InterruptHandler_LOW 003E                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       fsr2h 000FDA  
                                     fsr0l 000FE9                                       indf2 000FDF  
                                     fsr1l 000FE1                                       fsr2l 000FD9  
                                     btemp 006E                           __end_of_ADC_Init 12DE  
                                     prodh 000FF4                                       prodl 000FF3  
                                     start 000E                              __CFG_IESO$OFF 000000  
                   __end_of_led_initizlize 136E                              __CFG_MCLRE$ON 000000  
            ?_ADC_DefaultInterruptHandeler 0058                               ___param_bank 000000  
                         __end_of_INT0_ISR 16F8                           __end_of_INT1_ISR 16F4  
                         __end_of_INT2_ISR 16F0                                      ?_main 0058  
                                    _EEADR 000FA9                                      _PORTA 000F80  
                                    _PORTB 000F81                                      _PORTC 000F82  
                                    _PORTD 000F83                                      _PORTE 000F84  
                                    _TRISA 000F92                                      _TRISB 000F93  
                                    _TRISC 000F94                                      _TRISD 000F95  
                                    _TRISE 000F96           __size_of_ADC_GetConversionResult 0088  
                            __CFG_PWRT$OFF 000000                              __CFG_WRT0$OFF 000000  
                            __CFG_WRT1$OFF 000000                              __CFG_WRT2$OFF 000000  
                            __CFG_WRT3$OFF 000000                             __CFG_EBTR0$OFF 000000  
                           __CFG_FCMEN$OFF 000000                             __CFG_EBTR1$OFF 000000  
                           __CFG_EBTR2$OFF 000000                             __CFG_EBTR3$OFF 000000  
                                    _adc_1 002B                                      _adc_2 0025  
                                    _adc_3 001F                                      _adc_4 0019  
                            __CFG_WRTB$OFF 000000                              __CFG_WRTC$OFF 000000  
                            __CFG_WRTD$OFF 000000                             __CFG_EBTRB$OFF 000000  
                           __CFG_BOREN$OFF 000000                                      pclath 000FFA  
                                    tablat 000FF5                                      status 000FD8  
                          ?_led_initizlize 009A                            __initialization 14F0  
                             __end_of_main 16A4                                  ??_ADC_ISR 0060  
               ADC_StartConversion@adc_obj 009A                                     ??_main 00A4  
                            __activetblptr 000003                                  ??_RB4_ISR 0058  
                                ??_RB5_ISR 0058                                  ??_RB6_ISR 0058  
                                ??_RB7_ISR 0058                    ecu_layer_initialize@ret 00A3  
                                   _ADRESH 000FC4                                     _EEADRH 000FAA  
                                   _ADRESL 000FC3                                     _EEDATA 000FA8  
                                   _EECON2 000FA7                                     i2l1050 1184  
                                   i2l3316 1410                                     i2l3326 145A  
                                   i2l3318 1416                                     i2l3620 10F2  
                                   i2l3632 1114                                     i2l3608 10D0  
                                   i2l3560 1056                                     i2l3644 1136  
                                   i2l3572 106A                                     i2l3566 1060  
                                   i2l3656 1158                                     i2l3584 108C  
                                   i2l3668 117A                                     i2l3596 10AE  
                          ADC_Init@adc_obj 009B                              _tris_register 000B  
              __size_of_functionInitialize 0046                             __CFG_XINST$OFF 000000  
ADC_StartConversion_Interrupt@Local_Status 00A3                             __CFG_STVREN$ON 000000  
                                   clear_0 1536                               __pdataCOMRAM 0001  
                                ?_ADC_Init 009B                               __mediumconst 0000  
                                   tblptrh 000FF7                                     tblptrl 000FF6  
                                   tblptru 000FF8    ADC_GetConversionResult@convesion_result 005A  
                               __accesstop 0080                    __end_of__initialization 153C  
                                ?_INT0_ISR 0058                            __CFG_PBADEN$OFF 000000  
                                ?_INT1_ISR 0058                                  ?_INT2_ISR 0058  
          ADC_StartConversion@Local_Status 009C                              ___rparam_used 000001  
             __size_of_ADC_StartConversion 0024                             __pcstackCOMRAM 0058  
                             __pidataBANK0 16A4                              RB4_ISR@source 0058  
                  _ADC_GetConversionResult 13FC                  __size_of_InterruptManager 11B8  
                               ??_ADC_Init 009D                              RB5_ISR@source 0058  
                    _INT0_InterruptHandler 0052                                 ??_INT0_ISR 0058  
                               ??_INT1_ISR 0058                                 ??_INT2_ISR 0058  
            __size_of_ecu_layer_initialize 006C             ADC_GetConversionResult@adc_obj 0058  
                            RB6_ISR@source 0058                                    _ADC_ISR 1668  
                                  _RB4_ISR 16E6                                    _RB5_ISR 16E0  
                                  _RB6_ISR 16DA                                    _RB7_ISR 16D4  
                _RB6_InterruptHandler_HIGH 0048                          led_initizlize@led 009A  
                            RB7_ISR@source 0058                                 _btn_values 1001  
                         ??_led_initizlize 009C                   _RB6_InterruptHandler_LOW 0040  
                                  __Hparam 0000                                    __Lparam 0000  
                             __psmallconst 1000                  ??_ADC_GetConversionResult 005C  
                                  __pcinit 14F0                                    __ramtop 1000  
                                  __ptext0 1688                                    __ptext1 1546  
                                  __ptext2 1484                                    __ptext3 12DE  
                                  __ptext4 11C0                                    __ptext5 158C  
                                  __ptext6 1644                                    __ptext7 15CE  
                                  __ptext8 136E                                    _keypad1 0080  
                           __pintcode_body 1012                       end_of_initialization 153C  
                                  int_func 1012                                    postdec1 000FE5  
                                  postdec2 000FDD                                    postinc0 000FEE  
                                  postinc2 000FDE                      _INT1_InterruptHandler 0050  
                                _PORTBbits 000F81                           _InterruptManager 0008  
                      _ADC_StartConversion 1644                          __size_of_ADC_Init 011E  
                     ADC_Init@Local_Status 009E                 __end_of_functionInitialize 158C  
                        __size_of_INT0_ISR 0004                          __size_of_INT1_ISR 0004  
                        __size_of_INT2_ISR 0004              ADC_SelectChannel@Local_Status 009F  
                     ?_ADC_StartConversion 009A                              __pidataCOMRAM 160E  
  ADC_input_channel_port_configure@channel 009A                        start_initialization 14F0  
                             _lat_register 0001       ADC_StartConversion_Interrupt@adc_obj 00A0  
     ADC_StartConversion_Interrupt@channel 00A2                      ??_ADC_StartConversion 009C  
               led_initizlize@Local_Status 00A2                                __pdataBANK0 0080  
                         __CFG_LPT1OSC$OFF 000000                                   ?_ADC_ISR 0058  
             __end_of_ecu_layer_initialize 14F0             ??_ADC_DefaultInterruptHandeler 0060  
                                 ?_RB4_ISR 0058                                   ?_RB5_ISR 0058  
                                 ?_RB6_ISR 0058                                   ?_RB7_ISR 0058  
                              __pbssCOMRAM 0036                              __pcstackBANK0 009A  
                                _adc_res_1 0056                                  _adc_res_2 003C  
                                _adc_res_3 003A                                  _adc_res_4 0038  
                    _INT2_InterruptHandler 004E                          __CFG_CCP2MX$PORTC 000000  
                                __pintcode 0008   __end_of_ADC_input_channel_port_configure 13FC  
__size_of_ADC_input_channel_port_configure 008E          ?_ADC_input_channel_port_configure 0058  
       ??_ADC_input_channel_port_configure 009A           _ADC_input_channel_port_configure 136E  
                        _ADC_SelectChannel 15CE                         ?_ADC_SelectChannel 009B  
                              __smallconst 1000                  _RB4_InterruptHandler_HIGH 004C  
                      ??_ADC_SelectChannel 009E                                   _ADC_Init 11C0  
                _RB7_InterruptHandler_HIGH 0046                   _RB5_InterruptHandler_LOW 0042  
                                 _INT0_ISR 16F4                                   _INT1_ISR 16F0  
                                 _INT2_ISR 16EC                                   _RB4_Flag 0018  
                                 _RB5_Flag 0017                                   _RB6_Flag 0016  
                                 _RB7_Flag 0015                   __end_of_InterruptManager 11C0  
                                 _PIE1bits 000F9D                  __end_of_ADC_SelectChannel 160E  
                                 i2u208_48 1676                                   i2u243_40 10A8  
                                 i2u243_46 10AA                                   i2u253_40 10EC  
                                 i2u253_46 10EE                                   i2u238_40 1086  
                                 i2u238_46 1088                                   i2u263_40 1130  
                                 i2u263_46 1132                                   i2u248_40 10CA  
                                 i2u248_46 10CC                                   i2u273_40 1174  
                                 _PIR1bits 000F9E                                   i2u273_46 1176  
                                 i2u258_40 110E                                   i2u258_46 1110  
                                 i2u268_40 1152                                   i2u268_46 1154  
                                 i2u199_45 144E                           __CFG_WDTPS$32768 000000  
          ??_ADC_StartConversion_Interrupt 00A3                   ADC_SelectChannel@adc_obj 009B  
                         __size_of_ADC_ISR 0020                                 _ADCON0bits 000FC2  
                               _ADCON1bits 000FC1                                 _ADCON2bits 000FC0  
                 ADC_SelectChannel@channel 009D                           __size_of_RB4_ISR 0006  
                         __size_of_RB5_ISR 0006                           __size_of_RB6_ISR 0006  
                         __size_of_RB7_ISR 0006                                _INTCON2bits 000FF1  
                              _INTCON3bits 000FF0                                  copy_data0 1504  
                                copy_data1 1524                       _ecu_layer_initialize 1484  
                               _EECON1bits 000FA6                      _ADC_InterruptHandeler 0036  
                                 __Hrparam 0000                                   __Lrparam 0000  
                 ?_ADC_GetConversionResult 0058                    __size_of_led_initizlize 0090  
                       _functionInitialize 1546                                   _adc_flag 0055  
                       __end_of_btn_values 1011                        ?_functionInitialize 0058  
                                 __ptext10 16D4                                   __ptext11 16DA  
                                 __ptext20 0000                                   __ptext12 16E0  
                                 __ptext13 16E6                                   __ptext14 16EC  
                                 __ptext15 16F0                                   __ptext16 16F4  
                                 __ptext17 1668                                   __ptext18 16BE  
                                 __ptext19 13FC                      ?_ecu_layer_initialize 0058  
                            __size_of_main 001C                       ??_functionInitialize 00A4  
               __size_of_ADC_SelectChannel 0040                                   int$flags 006E  
    __end_of_ADC_StartConversion_Interrupt 15CE     __size_of_ADC_StartConversion_Interrupt 0042  
            _ADC_StartConversion_Interrupt 158C                                 _INTCONbits 000FF2  
                                 intlevel2 0000                __end_of_ADC_StartConversion 1668  
          __end_of_ADC_GetConversionResult 1484                     ??_ecu_layer_initialize 00A3  
                            _port_register 0090       __end_of_ADC_DefaultInterruptHandeler 16D4  
    __size_of_ADC_DefaultInterruptHandeler 0016               _ADC_DefaultInterruptHandeler 16BE  
                        ?_InterruptManager 0058  
